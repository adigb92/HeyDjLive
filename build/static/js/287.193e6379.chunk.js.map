{"version":3,"file":"static/js/287.193e6379.chunk.js","mappings":"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","sources":["components/DJEventEditPage.tsx","hooks/useForm.ts","utils/validation.ts"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { Formik, Field, Form, FormikHelpers } from 'formik';\nimport * as Yup from 'yup';\nimport { Container, Row, Col, Card, Button, Form as BootstrapForm, Alert } from 'react-bootstrap';\nimport { useForm } from '../hooks/useForm';\nimport { eventSchema, nameSchema } from '../utils/validation';\nimport LoadingSpinner from './LoadingSpinner';\nimport { get, put } from '../utils/apiClient';\nimport { handleApiError, handleApiSuccess } from '../utils/errorHandler';\n\ninterface Event {\n    djName: string;\n    eventName: string;\n    eventLocation: string;\n    eventDate: string;\n}\n\ninterface EventFormValues {\n    djName: string;\n    eventName: string;\n    eventLocation: string;\n    eventDate: string;\n}\n\nconst DJEventEditPage: React.FC = () => {\n    const { id } = useParams<{ id: string }>();\n    const [event, setEvent] = useState<Event | null>(null);\n    const [loading, setLoading] = useState(true);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const fetchEvent = async () => {\n            try {\n                const response = await get<Event>(`/events/${id}`);\n                setEvent(response);\n            } catch (error) {\n                console.error('Error fetching event:', error);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchEvent();\n    }, [id]);\n\n    const { loading: submitting, error, initialValues } = useForm<EventFormValues>({\n        initialValues: event || {\n            djName: '',\n            eventName: '',\n            eventLocation: '',\n            eventDate: '',\n        },\n        endpoint: `/events/${id}`,\n        onSuccess: () => {\n            navigate('/dj-events-list');\n        }\n    });\n\n    const validationSchema = Yup.object().shape({\n        ...eventSchema.fields,\n        djName: nameSchema,\n    });\n\n    const handleFormSubmit = async (values: EventFormValues, formikHelpers: FormikHelpers<EventFormValues>) => {\n        try {\n            await put(`/events/${id}`, values);\n            handleApiSuccess('Event updated successfully!');\n            navigate('/dj-events-list');\n        } catch (error) {\n            handleApiError(error);\n        } finally {\n            formikHelpers.setSubmitting(false);\n        }\n    };\n\n    if (loading) {\n        return (\n            <Container className=\"mt-5\">\n                <Row className=\"justify-content-center\">\n                    <Col xs={12} md={8} lg={6}>\n                        <div className=\"text-center\">\n                            <LoadingSpinner size={40} variant=\"bootstrap\" />\n                            <p className=\"mt-3\">Loading event details...</p>\n                        </div>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n\n    if (!event) {\n        return (\n            <Container className=\"mt-5\">\n                <Row className=\"justify-content-center\">\n                    <Col xs={12} md={8} lg={6}>\n                        <Alert variant=\"warning\">\n                            <i className=\"bi bi-exclamation-triangle-fill me-2\"></i>\n                            Event not found\n                        </Alert>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n\n    return (\n        <Container className=\"mt-5\">\n            <Row className=\"justify-content-center\">\n                <Col xs={12} md={8} lg={6}>\n                    <Card className=\"shadow-sm\">\n                        <Card.Body className=\"p-4\">\n                            <Card.Title as=\"h2\" className=\"text-center mb-4\">Edit Event</Card.Title>\n                            \n                            {error && (\n                                <Alert variant=\"danger\" className=\"mb-4\">\n                                    <i className=\"bi bi-exclamation-triangle-fill me-2\"></i>\n                                    {error}\n                                </Alert>\n                            )}\n\n            <Formik\n                                initialValues={initialValues}\n                                validationSchema={validationSchema}\n                                onSubmit={handleFormSubmit}\n                            >\n                                {({ isSubmitting, errors, touched }) => (\n                    <Form>\n                                        <BootstrapForm.Group className=\"mb-4\">\n                                            <BootstrapForm.Label className=\"fw-bold\">DJ Name</BootstrapForm.Label>\n                                            <Field\n                                                as={BootstrapForm.Control}\n                                                type=\"text\"\n                                                name=\"djName\"\n                                                placeholder=\"Enter DJ name\"\n                                                isInvalid={errors.djName && touched.djName}\n                                                className=\"py-2\"\n                                            />\n                                            {errors.djName && touched.djName && (\n                                                <BootstrapForm.Control.Feedback type=\"invalid\">\n                                                    <i className=\"bi bi-exclamation-circle-fill me-2\"></i>\n                                                    {errors.djName}\n                                                </BootstrapForm.Control.Feedback>\n                                            )}\n                                        </BootstrapForm.Group>\n\n                                        <BootstrapForm.Group className=\"mb-4\">\n                                            <BootstrapForm.Label className=\"fw-bold\">Event Name</BootstrapForm.Label>\n                                            <Field\n                                                as={BootstrapForm.Control}\n                                                type=\"text\"\n                                                name=\"eventName\"\n                                                placeholder=\"Enter event name\"\n                                                isInvalid={errors.eventName && touched.eventName}\n                                                className=\"py-2\"\n                                            />\n                                            {errors.eventName && touched.eventName && (\n                                                <BootstrapForm.Control.Feedback type=\"invalid\">\n                                                    <i className=\"bi bi-exclamation-circle-fill me-2\"></i>\n                                                    {errors.eventName}\n                                                </BootstrapForm.Control.Feedback>\n                                            )}\n                                        </BootstrapForm.Group>\n\n                                        <BootstrapForm.Group className=\"mb-4\">\n                                            <BootstrapForm.Label className=\"fw-bold\">Event Location</BootstrapForm.Label>\n                                            <Field\n                                                as={BootstrapForm.Control}\n                                                type=\"text\"\n                                                name=\"eventLocation\"\n                                                placeholder=\"Enter event location\"\n                                                isInvalid={errors.eventLocation && touched.eventLocation}\n                                                className=\"py-2\"\n                                            />\n                                            {errors.eventLocation && touched.eventLocation && (\n                                                <BootstrapForm.Control.Feedback type=\"invalid\">\n                                                    <i className=\"bi bi-exclamation-circle-fill me-2\"></i>\n                                                    {errors.eventLocation}\n                                                </BootstrapForm.Control.Feedback>\n                                            )}\n                                        </BootstrapForm.Group>\n\n                                        <BootstrapForm.Group className=\"mb-4\">\n                                            <BootstrapForm.Label className=\"fw-bold\">Event Date</BootstrapForm.Label>\n                                            <Field\n                                                as={BootstrapForm.Control}\n                                                type=\"date\"\n                                                name=\"eventDate\"\n                                                isInvalid={errors.eventDate && touched.eventDate}\n                                                className=\"py-2\"\n                                            />\n                                            {errors.eventDate && touched.eventDate && (\n                                                <BootstrapForm.Control.Feedback type=\"invalid\">\n                                                    <i className=\"bi bi-exclamation-circle-fill me-2\"></i>\n                                                    {errors.eventDate}\n                                                </BootstrapForm.Control.Feedback>\n                                            )}\n                                        </BootstrapForm.Group>\n\n                                        <div className=\"d-flex gap-2\">\n                                            <Button\n                                                variant=\"primary\"\n                                                type=\"submit\"\n                                                disabled={isSubmitting || submitting}\n                                                size=\"lg\"\n                                                className=\"flex-grow-1 py-2\"\n                                            >\n                                                {isSubmitting || submitting ? (\n                                                    <>\n                                                        <LoadingSpinner size={20} variant=\"bootstrap\" />\n                                                        <span className=\"ms-2\">Updating Event...</span>\n                                                    </>\n                                                ) : (\n                                                    <>\n                                                        <i className=\"bi bi-save-fill me-2\"></i>\n                                                        Update Event\n                                                    </>\n                                                )}\n                                            </Button>\n                                            <Button\n                                                variant=\"secondary\"\n                                                onClick={() => navigate('/dj-events-list')}\n                                                size=\"lg\"\n                                                className=\"py-2\"\n                                            >\n                                                <i className=\"bi bi-x-circle-fill me-2\"></i>\n                                                Cancel\n                                            </Button>\n                                        </div>\n                    </Form>\n                )}\n            </Formik>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default DJEventEditPage;\n","import { useState, useCallback } from 'react';\nimport { FormikHelpers } from 'formik';\nimport { handleApiError, handleApiSuccess } from '../utils/errorHandler';\nimport { post } from '../utils/apiClient';\n\ninterface ApiResponse {\n    message: string;\n    [key: string]: any;\n}\n\ninterface UseFormOptions<T> {\n    initialValues: T;\n    endpoint: string;\n    onSuccess?: (response: ApiResponse) => void;\n    onError?: (error: any) => void;\n}\n\nexport const useForm = <T extends object>({\n    initialValues,\n    endpoint,\n    onSuccess,\n    onError\n}: UseFormOptions<T>) => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState<string | null>(null);\n\n    const handleSubmit = useCallback(async (\n        values: T,\n        { setSubmitting, resetForm }: FormikHelpers<T>\n    ) => {\n        setLoading(true);\n        setError(null);\n        try {\n            const response = await post<ApiResponse>(endpoint, values);\n            handleApiSuccess(response.message);\n            if (onSuccess) onSuccess(response);\n            resetForm();\n        } catch (error) {\n            const errorMessage = handleApiError(error);\n            setError(errorMessage);\n            if (onError) onError(error);\n        } finally {\n            setLoading(false);\n            setSubmitting(false);\n        }\n    }, [endpoint, onSuccess, onError]);\n\n    return {\n        loading,\n        error,\n        handleSubmit,\n        initialValues\n    };\n}; ","import * as Yup from 'yup';\r\n\r\nexport const phoneNumberSchema = Yup.string()\r\n    .matches(/^[0-9]{10}$/, 'Phone number must be 10 digits')\r\n    .required('Phone number is required');\r\n\r\nexport const genderSchema = Yup.string()\r\n    .oneOf(['male', 'female', 'other'], 'Please select a valid gender')\r\n    .required('Gender is required');\r\n\r\nexport const emailSchema = Yup.string()\r\n    .email('Invalid email')\r\n    .required('Email is required');\r\n\r\nexport const nameSchema = Yup.string()\r\n    .min(2, 'Too Short!')\r\n    .max(50, 'Too Long!')\r\n    .required('Name is required');\r\n\r\nexport const eventSchema = Yup.object().shape({\r\n    eventName: Yup.string()\r\n        .min(2, 'Too Short!')\r\n        .max(100, 'Too Long!')\r\n        .required('Event name is required'),\r\n    eventLocation: Yup.string()\r\n        .min(2, 'Too Short!')\r\n        .max(200, 'Too Long!')\r\n        .required('Event location is required'),\r\n    eventDate: Yup.date()\r\n        .required('Event date is required')\r\n        .test('is-not-past', 'Event date cannot be in the past', function(value) {\r\n            if (!value) return false;\r\n            const today = new Date();\r\n            today.setHours(0, 0, 0, 0);\r\n            const eventDate = new Date(value);\r\n            eventDate.setHours(0, 0, 0, 0);\r\n            return eventDate >= today;\r\n        }),\r\n});\r\n\r\nexport const genreSchema = Yup.object().shape({\r\n    genre: Yup.string()\r\n        .required('Genre is required'),\r\n    youtubeLink: Yup.string()\r\n        .url('Must be a valid YouTube URL')\r\n        .required('YouTube link is required'),\r\n});\r\n\r\nexport const validateEmail = (email: string): boolean => {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n};\r\n\r\nexport const validatePassword = (password: string): boolean => {\r\n    // At least 8 characters, 1 uppercase, 1 lowercase, 1 number\r\n    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/;\r\n    return passwordRegex.test(password);\r\n};\r\n\r\nexport const validateName = (name: string): boolean => {\r\n    return name.length >= 2 && name.length <= 50;\r\n};\r\n\r\nexport const validateEventName = (name: string): boolean => {\r\n    return name.length >= 3 && name.length <= 100;\r\n};\r\n\r\nexport const validateEventDescription = (description: string): boolean => {\r\n    return description.length >= 10 && description.length <= 1000;\r\n};\r\n\r\nexport const validateEventDate = (date: string): boolean => {\r\n    const eventDate = new Date(date);\r\n    eventDate.setHours(0, 0, 0, 0);\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n    return eventDate >= today;\r\n}; "],"names":["DJEventEditPage","id","useParams","event","setEvent","useState","loading","setLoading","navigate","useNavigate","useEffect","async","response","get","error","console","fetchEvent","submitting","initialValues","useForm","djName","eventName","eventLocation","eventDate","endpoint","onSuccess","validationSchema","Yup","shape","eventSchema","fields","nameSchema","_jsx","Container","className","children","Row","Col","xs","md","lg","_jsxs","LoadingSpinner","size","variant","Card","Body","Title","as","Alert","Formik","onSubmit","values","formikHelpers","put","handleApiSuccess","handleApiError","setSubmitting","_ref","isSubmitting","errors","touched","Form","BootstrapForm","Group","Label","Field","Control","type","name","placeholder","isInvalid","Feedback","Button","disabled","_Fragment","onClick","onError","setError","handleSubmit","useCallback","_ref2","resetForm","post","message","errorMessage","phoneNumberSchema","matches","required","genderSchema","oneOf","emailSchema","email","min","max","test","value","today","Date","setHours","genre","youtubeLink","url"],"sourceRoot":""}