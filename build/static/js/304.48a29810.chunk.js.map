{"version":3,"file":"static/js/304.48a29810.chunk.js","mappings":"oRAqBA,MAuJA,EAvJgEA,IAAsB,IAArB,YAAEC,GAAaD,EAC5E,MAAME,GAAWC,EAAAA,EAAAA,OACX,QAAEC,EAAO,MAAEC,EAAK,aAAEC,EAAY,cAAEC,IAAkBC,EAAAA,EAAAA,GAAyB,CAC7ED,cAAe,CACHE,UAAW,GACXC,cAAe,GACfC,UAAW,GACnBC,OAAQX,EAAYY,MAAQ,IAEhCC,SAAU,UACVC,UAAWA,KACPb,EAAS,kBAAkB,EAE/Bc,QAAUX,GACOJ,EAAYgB,QAGlBZ,EAFI,6CAMba,EAAmBC,EAAAA,KAAaC,MAAM,IACrCC,EAAAA,GAAYC,OACfV,OAAQW,EAAAA,KAGZ,OACIC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,UAAU,OAAMC,UACvBH,EAAAA,EAAAA,KAACI,EAAAA,EAAG,CAACF,UAAU,yBAAwBC,UACnCH,EAAAA,EAAAA,KAACK,EAAAA,EAAG,CAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAEL,UACtBH,EAAAA,EAAAA,KAACS,EAAAA,EAAI,CAACP,UAAU,YAAWC,UACvBO,EAAAA,EAAAA,MAACD,EAAAA,EAAKE,KAAI,CAACT,UAAU,MAAKC,SAAA,EACtBH,EAAAA,EAAAA,KAACS,EAAAA,EAAKG,MAAK,CAACC,GAAG,KAAKX,UAAU,mBAAkBC,SAAC,iBAEhDtB,IACG6B,EAAAA,EAAAA,MAACI,EAAAA,EAAK,CAACC,QAAQ,SAASb,UAAU,OAAMC,SAAA,EACpCH,EAAAA,EAAAA,KAAA,KAAGE,UAAU,yCACZrB,MAITmB,EAAAA,EAAAA,KAACgB,EAAAA,GAAM,CACHjC,cAAeA,EACfW,iBAAkBA,EAClBuB,SAAUnC,EAAaqB,SAEtBe,IAAA,IAAC,aAAEC,EAAY,OAAEC,EAAM,QAAEC,GAASH,EAAA,OAC/CR,EAAAA,EAAAA,MAACY,EAAAA,GAAI,CAAAnB,SAAA,EACeO,EAAAA,EAAAA,MAACa,EAAAA,EAAcC,MAAK,CAACtB,UAAU,OAAMC,SAAA,EACjCH,EAAAA,EAAAA,KAACuB,EAAAA,EAAcE,MAAK,CAACvB,UAAU,UAASC,SAAC,gBACzCH,EAAAA,EAAAA,KAAC0B,EAAAA,GAAK,CACFb,GAAIU,EAAAA,EAAcI,QAClBC,KAAK,OACLvC,KAAK,YACLwC,YAAY,mBACZC,UAAWV,EAAOnC,WAAaoC,EAAQpC,UACvCiB,UAAU,SAEbkB,EAAOnC,WAAaoC,EAAQpC,YACzByB,EAAAA,EAAAA,MAACa,EAAAA,EAAcI,QAAQI,SAAQ,CAACH,KAAK,UAASzB,SAAA,EAC1CH,EAAAA,EAAAA,KAAA,KAAGE,UAAU,uCACZkB,EAAOnC,iBAKpByB,EAAAA,EAAAA,MAACa,EAAAA,EAAcC,MAAK,CAACtB,UAAU,OAAMC,SAAA,EACjCH,EAAAA,EAAAA,KAACuB,EAAAA,EAAcE,MAAK,CAACvB,UAAU,UAASC,SAAC,aACzCH,EAAAA,EAAAA,KAAC0B,EAAAA,GAAK,CACFb,GAAIU,EAAAA,EAAcI,QAClBC,KAAK,OACLvC,KAAK,SACLwC,YAAY,gBACZC,UAAWV,EAAOhC,QAAUiC,EAAQjC,OACpCc,UAAU,SAEbkB,EAAOhC,QAAUiC,EAAQjC,SACtBsB,EAAAA,EAAAA,MAACa,EAAAA,EAAcI,QAAQI,SAAQ,CAACH,KAAK,UAASzB,SAAA,EAC1CH,EAAAA,EAAAA,KAAA,KAAGE,UAAU,uCACZkB,EAAOhC,cAKpBsB,EAAAA,EAAAA,MAACa,EAAAA,EAAcC,MAAK,CAACtB,UAAU,OAAMC,SAAA,EACjCH,EAAAA,EAAAA,KAACuB,EAAAA,EAAcE,MAAK,CAACvB,UAAU,UAASC,SAAC,oBACzCH,EAAAA,EAAAA,KAAC0B,EAAAA,GAAK,CACFb,GAAIU,EAAAA,EAAcI,QAClBC,KAAK,OACLvC,KAAK,gBACLwC,YAAY,uBACZC,UAAWV,EAAOlC,eAAiBmC,EAAQnC,cAC3CgB,UAAU,SAEbkB,EAAOlC,eAAiBmC,EAAQnC,gBAC7BwB,EAAAA,EAAAA,MAACa,EAAAA,EAAcI,QAAQI,SAAQ,CAACH,KAAK,UAASzB,SAAA,EAC1CH,EAAAA,EAAAA,KAAA,KAAGE,UAAU,uCACZkB,EAAOlC,qBAKpBwB,EAAAA,EAAAA,MAACa,EAAAA,EAAcC,MAAK,CAACtB,UAAU,OAAMC,SAAA,EACjCH,EAAAA,EAAAA,KAACuB,EAAAA,EAAcE,MAAK,CAACvB,UAAU,UAASC,SAAC,gBACzCH,EAAAA,EAAAA,KAAC0B,EAAAA,GAAK,CACFb,GAAIU,EAAAA,EAAcI,QAClBC,KAAK,OACLvC,KAAK,YACLyC,UAAWV,EAAOjC,WAAakC,EAAQlC,UACvCe,UAAU,SAEbkB,EAAOjC,WAAakC,EAAQlC,YACzBuB,EAAAA,EAAAA,MAACa,EAAAA,EAAcI,QAAQI,SAAQ,CAACH,KAAK,UAASzB,SAAA,EAC1CH,EAAAA,EAAAA,KAAA,KAAGE,UAAU,uCACZkB,EAAOjC,iBAKpBa,EAAAA,EAAAA,KAAA,OAAKE,UAAU,SAAQC,UACnBH,EAAAA,EAAAA,KAACgC,EAAAA,EAAM,CACHjB,QAAQ,UACRa,KAAK,SACLK,SAAUd,GAAgBvC,EAC1BsD,KAAK,KACLhC,UAAU,OAAMC,SAEfgB,GAAgBvC,GACb8B,EAAAA,EAAAA,MAAAyB,EAAAA,SAAA,CAAAhC,SAAA,EACIH,EAAAA,EAAAA,KAACoC,EAAAA,EAAc,CAACF,KAAM,GAAInB,QAAQ,eAClCf,EAAAA,EAAAA,KAAA,QAAME,UAAU,OAAMC,SAAC,0BAG3BO,EAAAA,EAAAA,MAAAyB,EAAAA,SAAA,CAAAhC,SAAA,EACIH,EAAAA,EAAAA,KAAA,KAAGE,UAAU,gCAAkC,wBAM5E,cAOP,C,oECvJb,MAAMlB,EAAUR,IAKG,IALgB,cACtCO,EAAa,SACbO,EAAQ,UACRC,EAAS,QACTC,GACgBhB,EAChB,MAAOI,EAASyD,IAAcC,EAAAA,EAAAA,WAAS,IAChCzD,EAAO0D,IAAYD,EAAAA,EAAAA,UAAwB,MAE5CxD,GAAe0D,EAAAA,EAAAA,cAAYC,MAC7BC,EAASxB,KAEP,IADF,cAAEyB,EAAa,UAAEC,GAA6B1B,EAE9CmB,GAAW,GACXE,EAAS,MACT,IACI,MAAMM,QAAiBC,EAAAA,EAAAA,IAAkBxD,EAAUoD,IACnDK,EAAAA,EAAAA,GAAiBF,EAASG,SACtBzD,GAAWA,EAAUsD,GACzBD,GACJ,CAAE,MAAO/D,GACL,MAAMoE,GAAeC,EAAAA,EAAAA,GAAerE,GACpC0D,EAASU,GACLzD,GAASA,EAAQX,EACzB,CAAC,QACGwD,GAAW,GACXM,GAAc,EAClB,IACD,CAACrD,EAAUC,EAAWC,IAEzB,MAAO,CACHZ,UACAC,QACAC,eACAC,gBACH,C,qFClDE,MAAMoE,EAAoBxD,EAAAA,KAC5ByD,QAAQ,cAAe,kCACvBC,SAAS,4BAEDC,EAAe3D,EAAAA,KACvB4D,MAAM,CAAC,OAAQ,SAAU,SAAU,gCACnCF,SAAS,sBAEDG,EAAc7D,EAAAA,KACtB8D,MAAM,iBACNJ,SAAS,qBAEDtD,EAAaJ,EAAAA,KACrB+D,IAAI,EAAG,cACPC,IAAI,GAAI,aACRN,SAAS,oBAEDxD,EAAcF,EAAAA,KAAaC,MAAM,CAC1CX,UAAWU,EAAAA,KACN+D,IAAI,EAAG,cACPC,IAAI,IAAK,aACTN,SAAS,0BACdnE,cAAeS,EAAAA,KACV+D,IAAI,EAAG,cACPC,IAAI,IAAK,aACTN,SAAS,8BACdlE,UAAWQ,EAAAA,KACN0D,SAAS,0BACTO,KAAK,cAAe,oCAAoC,SAASC,GAC9D,IAAKA,EAAO,OAAO,EACnB,MAAMC,EAAQ,IAAIC,KAClBD,EAAME,SAAS,EAAG,EAAG,EAAG,GACxB,MAAM7E,EAAY,IAAI4E,KAAKF,GAE3B,OADA1E,EAAU6E,SAAS,EAAG,EAAG,EAAG,GACrB7E,GAAa2E,CACxB,MAGmBnE,EAAAA,KAAaC,MAAM,CAC1CqE,MAAOtE,EAAAA,KACF0D,SAAS,qBACda,YAAavE,EAAAA,KACRwE,IAAI,+BACJd,SAAS,6B","sources":["components/DJEventCreationPage.tsx","hooks/useForm.ts","utils/validation.ts"],"sourcesContent":["import React from 'react';\nimport { Formik, Field, Form } from 'formik';\nimport * as Yup from 'yup';\nimport { useNavigate } from 'react-router-dom';\nimport { Container, Row, Col, Card, Button, Form as BootstrapForm, Alert } from 'react-bootstrap';\nimport { useForm } from '../hooks/useForm';\nimport { eventSchema, nameSchema } from '../utils/validation';\nimport LoadingSpinner from './LoadingSpinner';\nimport { AppUser } from '../interfaces/types';\n\ninterface EventFormValues {\n    eventName: string;\n    eventLocation: string;\n    eventDate: string;\n    djName: string;\n}\n\ninterface DJEventCreationPageProps {\n    currentUser: AppUser;\n}\n\nconst DJEventCreationPage: React.FC<DJEventCreationPageProps> = ({ currentUser }) => {\n    const navigate = useNavigate();\n    const { loading, error, handleSubmit, initialValues } = useForm<EventFormValues>({\n        initialValues: {\n                    eventName: '',\n                    eventLocation: '',\n                    eventDate: '',\n            djName: currentUser.name || '',\n        },\n        endpoint: '/events',\n        onSuccess: () => {\n            navigate('/dj-events-list');\n        },\n        onError: (error) => {\n                    if (!currentUser.isAdmin) {\n                return \"You must be an admin to create an event.\";\n            }\n            return error;\n                    }\n    });\n\n    const validationSchema = Yup.object().shape({\n        ...eventSchema.fields,\n        djName: nameSchema,\n    });\n\n    return (\n        <Container className=\"mt-5\">\n            <Row className=\"justify-content-center\">\n                <Col xs={12} md={8} lg={6}>\n                    <Card className=\"shadow-sm\">\n                        <Card.Body className=\"p-4\">\n                            <Card.Title as=\"h2\" className=\"text-center mb-4\">Create Event</Card.Title>\n                            \n                            {error && (\n                                <Alert variant=\"danger\" className=\"mb-4\">\n                                    <i className=\"bi bi-exclamation-triangle-fill me-2\"></i>\n                                    {error}\n                                </Alert>\n                            )}\n\n                            <Formik\n                                initialValues={initialValues}\n                                validationSchema={validationSchema}\n                                onSubmit={handleSubmit}\n            >\n                                {({ isSubmitting, errors, touched }) => (\n                    <Form>\n                                        <BootstrapForm.Group className=\"mb-4\">\n                                            <BootstrapForm.Label className=\"fw-bold\">Event Name</BootstrapForm.Label>\n                                            <Field\n                                                as={BootstrapForm.Control}\n                                                type=\"text\"\n                                                name=\"eventName\"\n                                                placeholder=\"Enter event name\"\n                                                isInvalid={errors.eventName && touched.eventName}\n                                                className=\"py-2\"\n                                            />\n                                            {errors.eventName && touched.eventName && (\n                                                <BootstrapForm.Control.Feedback type=\"invalid\">\n                                                    <i className=\"bi bi-exclamation-circle-fill me-2\"></i>\n                                                    {errors.eventName}\n                                                </BootstrapForm.Control.Feedback>\n                                            )}\n                                        </BootstrapForm.Group>\n\n                                        <BootstrapForm.Group className=\"mb-4\">\n                                            <BootstrapForm.Label className=\"fw-bold\">DJ Name</BootstrapForm.Label>\n                                            <Field\n                                                as={BootstrapForm.Control}\n                                                type=\"text\"\n                                                name=\"djName\"\n                                                placeholder=\"Enter DJ name\"\n                                                isInvalid={errors.djName && touched.djName}\n                                                className=\"py-2\"\n                                            />\n                                            {errors.djName && touched.djName && (\n                                                <BootstrapForm.Control.Feedback type=\"invalid\">\n                                                    <i className=\"bi bi-exclamation-circle-fill me-2\"></i>\n                                                    {errors.djName}\n                                                </BootstrapForm.Control.Feedback>\n                                            )}\n                                        </BootstrapForm.Group>\n\n                                        <BootstrapForm.Group className=\"mb-4\">\n                                            <BootstrapForm.Label className=\"fw-bold\">Event Location</BootstrapForm.Label>\n                                            <Field\n                                                as={BootstrapForm.Control}\n                                                type=\"text\"\n                                                name=\"eventLocation\"\n                                                placeholder=\"Enter event location\"\n                                                isInvalid={errors.eventLocation && touched.eventLocation}\n                                                className=\"py-2\"\n                                            />\n                                            {errors.eventLocation && touched.eventLocation && (\n                                                <BootstrapForm.Control.Feedback type=\"invalid\">\n                                                    <i className=\"bi bi-exclamation-circle-fill me-2\"></i>\n                                                    {errors.eventLocation}\n                                                </BootstrapForm.Control.Feedback>\n                                            )}\n                                        </BootstrapForm.Group>\n\n                                        <BootstrapForm.Group className=\"mb-4\">\n                                            <BootstrapForm.Label className=\"fw-bold\">Event Date</BootstrapForm.Label>\n                                            <Field\n                                                as={BootstrapForm.Control}\n                                                type=\"date\"\n                                                name=\"eventDate\"\n                                                isInvalid={errors.eventDate && touched.eventDate}\n                                                className=\"py-2\"\n                                            />\n                                            {errors.eventDate && touched.eventDate && (\n                                                <BootstrapForm.Control.Feedback type=\"invalid\">\n                                                    <i className=\"bi bi-exclamation-circle-fill me-2\"></i>\n                                                    {errors.eventDate}\n                                                </BootstrapForm.Control.Feedback>\n                                            )}\n                                        </BootstrapForm.Group>\n\n                                        <div className=\"d-grid\">\n                                            <Button\n                                                variant=\"primary\"\n                                                type=\"submit\"\n                                                disabled={isSubmitting || loading}\n                                                size=\"lg\"\n                                                className=\"py-2\"\n                                            >\n                                                {isSubmitting || loading ? (\n                                                    <>\n                                                        <LoadingSpinner size={20} variant=\"bootstrap\" />\n                                                        <span className=\"ms-2\">Creating Event...</span>\n                                                    </>\n                                                ) : (\n                                                    <>\n                                                        <i className=\"bi bi-plus-circle-fill me-2\"></i>\n                                                        Create Event\n                                                    </>\n                                                )}\n                                            </Button>\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default DJEventCreationPage;\n","import { useState, useCallback } from 'react';\nimport { FormikHelpers } from 'formik';\nimport { handleApiError, handleApiSuccess } from '../utils/errorHandler';\nimport { post } from '../utils/apiClient';\n\ninterface ApiResponse {\n    message: string;\n    [key: string]: any;\n}\n\ninterface UseFormOptions<T> {\n    initialValues: T;\n    endpoint: string;\n    onSuccess?: (response: ApiResponse) => void;\n    onError?: (error: any) => void;\n}\n\nexport const useForm = <T extends object>({\n    initialValues,\n    endpoint,\n    onSuccess,\n    onError\n}: UseFormOptions<T>) => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState<string | null>(null);\n\n    const handleSubmit = useCallback(async (\n        values: T,\n        { setSubmitting, resetForm }: FormikHelpers<T>\n    ) => {\n        setLoading(true);\n        setError(null);\n        try {\n            const response = await post<ApiResponse>(endpoint, values);\n            handleApiSuccess(response.message);\n            if (onSuccess) onSuccess(response);\n            resetForm();\n        } catch (error) {\n            const errorMessage = handleApiError(error);\n            setError(errorMessage);\n            if (onError) onError(error);\n        } finally {\n            setLoading(false);\n            setSubmitting(false);\n        }\n    }, [endpoint, onSuccess, onError]);\n\n    return {\n        loading,\n        error,\n        handleSubmit,\n        initialValues\n    };\n}; ","import * as Yup from 'yup';\r\n\r\nexport const phoneNumberSchema = Yup.string()\r\n    .matches(/^[0-9]{10}$/, 'Phone number must be 10 digits')\r\n    .required('Phone number is required');\r\n\r\nexport const genderSchema = Yup.string()\r\n    .oneOf(['male', 'female', 'other'], 'Please select a valid gender')\r\n    .required('Gender is required');\r\n\r\nexport const emailSchema = Yup.string()\r\n    .email('Invalid email')\r\n    .required('Email is required');\r\n\r\nexport const nameSchema = Yup.string()\r\n    .min(2, 'Too Short!')\r\n    .max(50, 'Too Long!')\r\n    .required('Name is required');\r\n\r\nexport const eventSchema = Yup.object().shape({\r\n    eventName: Yup.string()\r\n        .min(2, 'Too Short!')\r\n        .max(100, 'Too Long!')\r\n        .required('Event name is required'),\r\n    eventLocation: Yup.string()\r\n        .min(2, 'Too Short!')\r\n        .max(200, 'Too Long!')\r\n        .required('Event location is required'),\r\n    eventDate: Yup.date()\r\n        .required('Event date is required')\r\n        .test('is-not-past', 'Event date cannot be in the past', function(value) {\r\n            if (!value) return false;\r\n            const today = new Date();\r\n            today.setHours(0, 0, 0, 0);\r\n            const eventDate = new Date(value);\r\n            eventDate.setHours(0, 0, 0, 0);\r\n            return eventDate >= today;\r\n        }),\r\n});\r\n\r\nexport const genreSchema = Yup.object().shape({\r\n    genre: Yup.string()\r\n        .required('Genre is required'),\r\n    youtubeLink: Yup.string()\r\n        .url('Must be a valid YouTube URL')\r\n        .required('YouTube link is required'),\r\n});\r\n\r\nexport const validateEmail = (email: string): boolean => {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n};\r\n\r\nexport const validatePassword = (password: string): boolean => {\r\n    // At least 8 characters, 1 uppercase, 1 lowercase, 1 number\r\n    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/;\r\n    return passwordRegex.test(password);\r\n};\r\n\r\nexport const validateName = (name: string): boolean => {\r\n    return name.length >= 2 && name.length <= 50;\r\n};\r\n\r\nexport const validateEventName = (name: string): boolean => {\r\n    return name.length >= 3 && name.length <= 100;\r\n};\r\n\r\nexport const validateEventDescription = (description: string): boolean => {\r\n    return description.length >= 10 && description.length <= 1000;\r\n};\r\n\r\nexport const validateEventDate = (date: string): boolean => {\r\n    const eventDate = new Date(date);\r\n    eventDate.setHours(0, 0, 0, 0);\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n    return eventDate >= today;\r\n}; "],"names":["_ref","currentUser","navigate","useNavigate","loading","error","handleSubmit","initialValues","useForm","eventName","eventLocation","eventDate","djName","name","endpoint","onSuccess","onError","isAdmin","validationSchema","Yup","shape","eventSchema","fields","nameSchema","_jsx","Container","className","children","Row","Col","xs","md","lg","Card","_jsxs","Body","Title","as","Alert","variant","Formik","onSubmit","_ref2","isSubmitting","errors","touched","Form","BootstrapForm","Group","Label","Field","Control","type","placeholder","isInvalid","Feedback","Button","disabled","size","_Fragment","LoadingSpinner","setLoading","useState","setError","useCallback","async","values","setSubmitting","resetForm","response","post","handleApiSuccess","message","errorMessage","handleApiError","phoneNumberSchema","matches","required","genderSchema","oneOf","emailSchema","email","min","max","test","value","today","Date","setHours","genre","youtubeLink","url"],"sourceRoot":""}