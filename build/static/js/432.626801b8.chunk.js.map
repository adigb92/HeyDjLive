{"version":3,"file":"static/js/432.626801b8.chunk.js","mappings":"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","sources":["components/QrCodeScanningGuests.tsx"],"sourcesContent":["import React, { FunctionComponent, useEffect, useRef, useState, useContext } from 'react';\nimport { Html5QrcodeScanner, Html5Qrcode } from 'html5-qrcode';\nimport { useNavigate } from 'react-router-dom';\nimport { Alert, Button, Card, Container } from 'react-bootstrap';\nimport { post, get } from '../utils/apiClient';\nimport { handleApiError } from '../utils/errorHandler';\nimport LoadingSpinner from './LoadingSpinner';\nimport UserContext from './UserContext';\n\ninterface QrCodeScanningGuestsProps { }\n\ninterface ScanResult {\n    message: string;\n    eventName: string;\n    eventLocation: string;\n    eventDate: string;\n}\n\nconst QrCodeScanningGuests: FunctionComponent<QrCodeScanningGuestsProps> = () => {\n    const qrRef = useRef<HTMLDivElement>(null);\n    const fileInputRef = useRef<HTMLInputElement>(null);\n    const navigate = useNavigate();\n    const { user, clearUserContext } = useContext(UserContext);\n    const [scanResult, setScanResult] = useState<ScanResult | null>(null);\n    const [error, setError] = useState<string | null>(null);\n    const [isScanning, setIsScanning] = useState(true);\n    const [isLoading, setIsLoading] = useState(false);\n\n    const processDecodedText = async (decodedText: string) => {\n        console.log('QR Code scanned:', decodedText);\n        console.log('Current user context:', user);\n        \n        setIsScanning(false);\n        setIsLoading(true);\n        try {\n            // Check if the scanned text is a URL (new format)\n            if (decodedText.startsWith('http')) {\n                console.log('Processing new format QR code (URL)');\n                // Extract eventId and djId from URL parameters\n                const url = new URL(decodedText);\n                const eventId = url.searchParams.get('eventId');\n                const djId = url.searchParams.get('djId');\n                \n                console.log('Extracted eventId:', eventId, 'djId:', djId);\n                \n                if (eventId && djId) {\n                    // If user is already logged in, directly assign them to the event\n                    if (user && user._id) {\n                        console.log('User is logged in, checking if already registered');\n                        try {\n                            // Check if user is already registered for this event\n                            const eventsResponse = await get<any[]>('/events/live');\n                            const currentEvent = eventsResponse.find((event: any) => \n                                event._id === eventId\n                            );\n                            \n                            if (currentEvent) {\n                                const isAlreadyRegistered = currentEvent.registeredUsers.some(\n                                    (ru: any) => ru.userId === user._id\n                                );\n                                \n                                if (isAlreadyRegistered) {\n                                    console.log('User is already registered for this event');\n                                    // Navigate directly to genre selection\n                                    navigate('/genre-selection');\n                                    return;\n                                }\n                            }\n                            \n                            console.log('User not registered for this event, assigning now');\n                            await post('/events/assign-user', {\n                                eventId,\n                                userId: user._id,\n                                djId\n                            });\n                            \n                            // Navigate to genre selection\n                            navigate('/genre-selection');\n                            return;\n                        } catch (error) {\n                            console.error('Error assigning user to event:', error);\n                            setError(handleApiError(error, 'Failed to assign to event'));\n                            setIsLoading(false);\n                            return;\n                        }\n                    } else {\n                        console.log('User is not logged in, redirecting to registration');\n                        // Clear any existing user context to ensure clean state\n                        clearUserContext();\n                        \n                        // Store the event data and redirect to registration\n                        sessionStorage.setItem('pendingEventData', JSON.stringify({\n                            eventId,\n                            djId\n                        }));\n                        \n                        // Redirect to the registration page\n                        window.location.href = decodedText;\n                        return;\n                    }\n                }\n            }\n            \n            // Handle old format (user ID) - redirect to registration with DJ ID\n            console.log('Processing old format QR code (user ID)');\n            // Check if the user ID corresponds to a DJ\n            try {\n                const response = await get<{ djName: string }>('/user/dj-info/' + decodedText);\n                console.log('DJ info response:', response);\n                \n                if (response.djName) {\n                    // If user is already logged in, find live event and assign them\n                    if (user && user._id) {\n                        console.log('User is logged in, finding live event');\n                        try {\n                            // Find the current live event for this DJ\n                            const eventsResponse = await get<any[]>('/events/live');\n                            const liveEvents = eventsResponse.filter((event: any) => \n                                event.userId === decodedText\n                            );\n                            \n                            if (liveEvents.length > 0) {\n                                const currentEvent = liveEvents[0];\n                                \n                                // Check if user is already registered for this event\n                                const isAlreadyRegistered = currentEvent.registeredUsers.some(\n                                    (ru: any) => ru.userId === user._id\n                                );\n                                \n                                if (isAlreadyRegistered) {\n                                    console.log('User is already registered for this event');\n                                    // Navigate directly to genre selection\n                                    navigate('/genre-selection');\n                                    return;\n                                }\n                                \n                                console.log('User not registered for this event, assigning now');\n                                await post('/events/assign-user', {\n                                    eventId: currentEvent._id || currentEvent.eventId,\n                                    userId: user._id,\n                                    djId: decodedText\n                                });\n                                \n                                // Navigate to genre selection\n                                navigate('/genre-selection');\n                                return;\n                            } else {\n                                setError('No live events found for this DJ');\n                                setIsLoading(false);\n                                return;\n                            }\n                        } catch (error) {\n                            console.error('Error finding live event:', error);\n                            setError(handleApiError(error, 'Failed to find live event'));\n                            setIsLoading(false);\n                            return;\n                        }\n                    } else {\n                        console.log('User is not logged in, redirecting to registration with DJ ID');\n                        // Clear any existing user context to ensure clean state\n                        clearUserContext();\n                        \n                        // This is a DJ's QR code, redirect to registration\n                        const appUrl = window.location.origin;\n                        const registerUrl = `${appUrl}/register?djId=${decodedText}`;\n                        \n                        // Store the DJ ID for later use\n                        sessionStorage.setItem('pendingEventData', JSON.stringify({\n                            djId: decodedText\n                        }));\n                        \n                        // Redirect to registration\n                        window.location.href = registerUrl;\n                        return;\n                    }\n                } else {\n                    // If it's not a DJ and user is not logged in, redirect to registration\n                    if (!user || !user._id) {\n                        setError('This QR code is not recognized. Please contact the event organizer.');\n                        setIsLoading(false);\n                        return;\n                    }\n                    \n                    // If user is logged in but QR code is not recognized, show error\n                    setError('This QR code is not recognized. Please contact the event organizer.');\n                    setIsLoading(false);\n                    return;\n                }\n            } catch (djError) {\n                console.error('Error checking DJ info:', djError);\n                // If there's an error checking DJ info, redirect non-logged-in users to registration\n                if (!user || !user._id) {\n                    setError('Unable to verify QR code. Please contact the event organizer.');\n                    setIsLoading(false);\n                    return;\n                }\n                \n                // For logged-in users, show error\n                setError('Unable to verify QR code. Please contact the event organizer.');\n                setIsLoading(false);\n                return;\n            }\n        } catch (error) {\n            console.error('Error in QR code processing:', error);\n            setError(handleApiError(error, 'Failed to process QR code scan'));\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        let html5QrCodeScanner: Html5QrcodeScanner | null = null;\n\n        if (qrRef.current && isScanning) {\n            html5QrCodeScanner = new Html5QrcodeScanner(\n                \"qr-reader\",\n                { fps: 10, qrbox: 250 },\n                false\n            );\n\n            const qrCodeSuccessCallback = async (decodedText: string) => {\n                await processDecodedText(decodedText);\n            };\n\n            html5QrCodeScanner.render(qrCodeSuccessCallback, (error: any) => {\n                // Ignore routine frame failures while scanning; only surface real errors\n                const message = typeof error === 'string' ? error : (error?.message || '');\n                const name = (error && error.name) ? error.name : '';\n                if (name === 'NotFoundException' || message.includes('NotFoundException')) {\n                    // Expected when no QR is detected in the current frame; keep scanning\n                    return;\n                }\n                if (message.includes('Camera access')) {\n                    setError('Camera access was denied. Please allow camera permissions and try again.');\n                    return;\n                }\n                console.warn('QR Code scanning warning:', error);\n                // Do not set a hard error here to avoid stopping the scanner on transient issues\n            });\n        }\n\n        return () => {\n            if (html5QrCodeScanner) {\n                html5QrCodeScanner.clear().catch((error: any) => \n                    setError(handleApiError(error, 'Failed to clear QR Scanner'))\n                );\n            }\n        };\n    }, [isScanning, user, navigate, clearUserContext]);\n\n    const handleScanAgain = () => {\n        setScanResult(null);\n        setError(null);\n        setIsScanning(true);\n    };\n\n    const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\n        const file = e.target.files && e.target.files[0];\n        if (!file) return;\n        setError(null);\n        setIsLoading(true);\n        try {\n            // Use a temporary element id for Html5Qrcode constructor\n            const elementId = 'qr-file-reader';\n            // Ensure the container exists in the DOM\n            let container = document.getElementById(elementId);\n            if (!container) {\n                container = document.createElement('div');\n                container.id = elementId;\n                container.style.display = 'none';\n                document.body.appendChild(container);\n            }\n            const html5QrCode = new Html5Qrcode(elementId);\n            const decodedText = await html5QrCode.scanFile(file, true);\n            await processDecodedText(decodedText);\n            try { await html5QrCode.clear(); } catch (_e) { /* ignore */ }\n        } catch (err) {\n            console.error('File upload scan error:', err);\n            const message = (err as any)?.message || String(err);\n            if (message.includes('NotFound')) {\n                setError('Could not detect a QR code in the selected image. Please try a clearer image.');\n            } else {\n                setError(handleApiError(err, 'Failed to scan QR image'));\n            }\n        } finally {\n            setIsLoading(false);\n            // Reset the file input so the same file can be re-selected\n            if (fileInputRef.current) fileInputRef.current.value = '';\n        }\n    };\n\n    return (\n        <Container className=\"mt-4\">\n            <Card className=\"shadow\">\n                <Card.Header className=\"bg-primary text-white\">\n                    <h2 className=\"mb-0\">Scan DJ's QR Code</h2>\n                </Card.Header>\n                <Card.Body>\n                    {isScanning ? (\n                        <div>\n                            <div id=\"qr-reader\" ref={qrRef}></div>\n                            <div className=\"text-center mt-3\">\n                                <input\n                                    ref={fileInputRef}\n                                    type=\"file\"\n                                    accept=\"image/*\"\n                                    onChange={handleFileUpload}\n                                    style={{ display: 'none' }}\n                                />\n                                <Button variant=\"secondary\" onClick={() => fileInputRef.current?.click()}>\n                                    Or upload a QR image\n                                </Button>\n                            </div>\n                        </div>\n                    ) : (\n                        <div className=\"text-center\">\n                            {isLoading ? (\n                                <LoadingSpinner size={40} variant=\"bootstrap\" />\n                            ) : error ? (\n                                <Alert variant=\"danger\">\n                                    {error}\n                                    <Button variant=\"primary\" className=\"mt-3\" onClick={handleScanAgain}>\n                                        Scan Again\n                                    </Button>\n                                </Alert>\n                            ) : scanResult ? (\n        <div>\n                                    <Alert variant=\"success\">\n                                        <h4>{scanResult.message}</h4>\n                                        <hr />\n                                        <p><strong>Event:</strong> {scanResult.eventName}</p>\n                                        <p><strong>Location:</strong> {scanResult.eventLocation}</p>\n                                        <p><strong>Date:</strong> {new Date(scanResult.eventDate).toLocaleString()}</p>\n                                    </Alert>\n                                    <Button variant=\"primary\" onClick={handleScanAgain}>\n                                        Scan Another Code\n                                    </Button>\n                                </div>\n                            ) : null}\n        </div>\n                    )}\n                </Card.Body>\n            </Card>\n        </Container>\n    );\n};\n\nexport default QrCodeScanningGuests;\n"],"names":["QrCodeScanningGuests","qrRef","useRef","fileInputRef","navigate","useNavigate","user","clearUserContext","useContext","UserContext","scanResult","setScanResult","useState","error","setError","isScanning","setIsScanning","isLoading","setIsLoading","processDecodedText","async","console","log","decodedText","startsWith","url","URL","eventId","searchParams","get","djId","_id","sessionStorage","setItem","JSON","stringify","window","location","href","currentEvent","find","event","registeredUsers","some","ru","userId","post","handleApiError","response","djName","registerUrl","origin","liveEvents","filter","length","djError","useEffect","html5QrCodeScanner","current","Html5QrcodeScanner","fps","qrbox","qrCodeSuccessCallback","render","message","name","includes","warn","clear","catch","handleScanAgain","_jsx","Container","className","children","_jsxs","Card","Header","Body","id","ref","type","accept","onChange","file","e","target","files","elementId","container","document","getElementById","createElement","style","display","body","appendChild","html5QrCode","Html5Qrcode","scanFile","_e","err","String","value","Button","variant","onClick","_fileInputRef$current","click","LoadingSpinner","size","Alert","eventName","eventLocation","Date","eventDate","toLocaleString"],"sourceRoot":""}