{"version":3,"file":"static/js/636.37fe4197.chunk.js","mappings":"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","sources":["components/QrCodeForDj.tsx","../node_modules/react-bootstrap/esm/Row.js"],"sourcesContent":["import { FunctionComponent, useContext, useEffect, useState } from \"react\";\nimport UserContext from \"./UserContext\";\nimport { Card, Container, Alert, Button, Form, Row, Col } from 'react-bootstrap';\nimport { get } from '../utils/apiClient';\nimport { handleApiError } from '../utils/errorHandler';\nimport LoadingSpinner from './LoadingSpinner';\n\ninterface QrCodeForDjProps { }\n\ninterface Event {\n    _id: string;\n    eventName: string;\n    eventLocation: string;\n    eventDate: string;\n}\n\nconst QrCodeForDj: FunctionComponent<QrCodeForDjProps> = () => {\n    const [qrCode, setQrCode] = useState(\"\");\n    const [events, setEvents] = useState<Event[]>([]);\n    const [selectedEventId, setSelectedEventId] = useState<string>(\"\");\n    const [error, setError] = useState<string | null>(null);\n    const [isLoading, setIsLoading] = useState(true);\n    const [isGenerating, setIsGenerating] = useState(false);\n    const userContext = useContext(UserContext);\n\n    useEffect(() => {\n        const fetchEvents = async () => {\n            if (userContext?.user?.isAdmin) {\n                try {\n                    setIsLoading(true);\n                    const response = await get<Event[]>(`/events/user/${userContext.user._id}`);\n                    setEvents(response);\n                    setError(null);\n                } catch (error) {\n                    setError(handleApiError(error, 'Failed to load events. Please try again.'));\n                } finally {\n                    setIsLoading(false);\n        }\n            }\n        };\n\n        fetchEvents();\n    }, [userContext]);\n\n    const handleGenerateQrCode = async () => {\n        if (!selectedEventId) {\n            setError('Please select an event first.');\n            return;\n        }\n\n        try {\n            setIsGenerating(true);\n            setError(null);\n            const response = await get<{ qrCode: string }>(`/events/${selectedEventId}/qr-code`);\n            setQrCode(response.qrCode);\n        } catch (error) {\n            setError(handleApiError(error, 'Failed to generate QR code. Please try again.'));\n        } finally {\n            setIsGenerating(false);\n        }\n    };\n\n    const handleDownloadQrCode = () => {\n        if (qrCode) {\n            const link = document.createElement('a');\n            link.href = qrCode;\n            const selectedEvent = events.find(e => e._id === selectedEventId);\n            link.download = `dj-qr-code-${selectedEvent?.eventName || 'event'}.png`;\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        }\n    };\n\n    if (!userContext?.user?.isAdmin) {\n        return (\n            <Container className=\"mt-4\">\n                <Alert variant=\"warning\">\n                    You need to be a DJ to view this page.\n                </Alert>\n            </Container>\n        );\n    }\n\n    return (\n        <Container className=\"mt-4\">\n            <Card className=\"shadow\">\n                <Card.Header className=\"bg-primary text-white\">\n                    <h2 className=\"mb-0\">Generate Event QR Code</h2>\n                </Card.Header>\n                <Card.Body>\n                    {isLoading ? (\n                        <LoadingSpinner size={40} variant=\"bootstrap\" />\n                    ) : error ? (\n                        <Alert variant=\"danger\">{error}</Alert>\n                    ) : (\n                        <>\n                            <Row>\n                                <Col md={6}>\n                                    <Form.Group className=\"mb-3\">\n                                        <Form.Label>Select Event</Form.Label>\n                                        <Form.Select \n                                            value={selectedEventId} \n                                            onChange={(e) => setSelectedEventId(e.target.value)}\n                                        >\n                                            <option value=\"\">Choose an event...</option>\n                                            {events.map((event) => (\n                                                <option key={event._id} value={event._id}>\n                                                    {event.eventName} - {new Date(event.eventDate).toLocaleDateString()}\n                                                </option>\n                                            ))}\n                                        </Form.Select>\n                                    </Form.Group>\n                                    \n                                    <Button \n                                        variant=\"primary\" \n                                        onClick={handleGenerateQrCode}\n                                        disabled={!selectedEventId || isGenerating}\n                                        className=\"mb-3\"\n                                    >\n                                        {isGenerating ? (\n                                            <>\n                                                <LoadingSpinner size={20} variant=\"bootstrap\" />\n                                                <span className=\"ms-2\">Generating...</span>\n                                            </>\n                                        ) : 'Generate QR Code'}\n                                    </Button>\n                                </Col>\n                                \n                                <Col md={6}>\n                                    {qrCode && (\n                                        <div className=\"text-center\">\n                                            <img \n                                                src={qrCode} \n                                                alt=\"Event QR Code\" \n                                                className=\"img-fluid mb-3\"\n                                                style={{ maxWidth: '250px' }}\n                                            />\n                                            <div className=\"mt-3\">\n                                                <Button \n                                                    variant=\"success\" \n                                                    onClick={handleDownloadQrCode}\n                                                    className=\"me-2\"\n                                                >\n                                                    Download QR Code\n                                                </Button>\n                                                <Button \n                                                    variant=\"primary\" \n                                                    onClick={() => window.print()}\n                                                >\n                                                    Print QR Code\n                                                </Button>\n                                            </div>\n        </div>\n                                    )}\n                                </Col>\n                            </Row>\n                            \n                            {qrCode && (\n                                <Alert variant=\"info\" className=\"mt-3\">\n                                    <h5>Instructions for Guests:</h5>\n                                    <p className=\"mb-0\">\n                                        Ask your guests to scan this QR code using their phone's camera or a QR code scanner app.\n                                        This will redirect them to the app's registration page and automatically assign them to this event.\n                                    </p>\n                                </Alert>\n                            )}\n                        </>\n                    )}\n                </Card.Body>\n            </Card>\n        </Container>\n    );\n};\n\nexport default QrCodeForDj;\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints, useBootstrapMinBreakpoint } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Row = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  const breakpoints = useBootstrapBreakpoints();\n  const minBreakpoint = useBootstrapMinBreakpoint();\n  const sizePrefix = `${decoratedBsPrefix}-cols`;\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let cols;\n    if (propValue != null && typeof propValue === 'object') {\n      ({\n        cols\n      } = propValue);\n    } else {\n      cols = propValue;\n    }\n    const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : '';\n    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, ...classes)\n  });\n});\nRow.displayName = 'Row';\nexport default Row;"],"names":["QrCodeForDj","_userContext$user2","qrCode","setQrCode","useState","events","setEvents","selectedEventId","setSelectedEventId","error","setError","isLoading","setIsLoading","isGenerating","setIsGenerating","userContext","useContext","UserContext","useEffect","async","_userContext$user","user","isAdmin","response","get","_id","handleApiError","fetchEvents","_jsx","Container","className","children","_jsxs","Card","Header","Body","LoadingSpinner","size","variant","Alert","_Fragment","Row","Col","md","Form","Group","Label","Select","value","onChange","e","target","map","event","eventName","Date","eventDate","toLocaleDateString","Button","onClick","disabled","src","alt","style","maxWidth","handleDownloadQrCode","link","document","createElement","href","selectedEvent","find","download","body","appendChild","click","removeChild","window","print","React","_ref","ref","bsPrefix","as","Component","props","decoratedBsPrefix","useBootstrapPrefix","breakpoints","useBootstrapBreakpoints","minBreakpoint","useBootstrapMinBreakpoint","sizePrefix","classes","forEach","brkPoint","propValue","cols","infix","push","classNames","displayName"],"sourceRoot":""}