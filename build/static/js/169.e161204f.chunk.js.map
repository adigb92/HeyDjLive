{"version":3,"file":"static/js/169.e161204f.chunk.js","mappings":"oRAgBA,MA4JA,EA5JmCA,KAC/B,MAAMC,GAAWC,EAAAA,EAAAA,OAEX,QAAEC,EAAO,MAAEC,EAAK,aAAEC,EAAY,cAAEC,IAAkBC,EAAAA,EAAAA,GAAgC,CACpFD,cAAe,CACHE,KAAM,GACNC,MAAO,GACPC,YAAa,GACbC,OAAQ,IAEpBC,SAAU,iBACVC,UAAWA,IAAMZ,EAAS,sBAGxBa,EAAmBC,EAAAA,KAAaC,MAAM,CACxCR,KAAMS,EAAAA,GACNR,MAAOS,EAAAA,GACPR,YAAaS,EAAAA,GACbR,OAAQS,EAAAA,KAGZ,OACIC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,UAAU,OAAMC,UACvBH,EAAAA,EAAAA,KAACI,EAAAA,EAAG,CAACF,UAAU,yBAAwBC,UACnCH,EAAAA,EAAAA,KAACK,EAAAA,EAAG,CAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAEL,UACtBH,EAAAA,EAAAA,KAACS,EAAAA,EAAI,CAACP,UAAU,YAAWC,UACvBO,EAAAA,EAAAA,MAACD,EAAAA,EAAKE,KAAI,CAACT,UAAU,MAAKC,SAAA,EACtBH,EAAAA,EAAAA,KAACS,EAAAA,EAAKG,MAAK,CAACC,GAAG,KAAKX,UAAU,mBAAkBC,SAAC,iBAEhDpB,IACG2B,EAAAA,EAAAA,MAACI,EAAAA,EAAK,CAACC,QAAQ,SAASb,UAAU,OAAMC,SAAA,EACpCH,EAAAA,EAAAA,KAAA,KAAGE,UAAU,yCACZnB,MAITiB,EAAAA,EAAAA,KAACgB,EAAAA,GAAM,CACH/B,cAAeA,EACfQ,iBAAkBA,EAClBwB,SAAUjC,EAAamB,SAEtBe,IAAA,IAAC,aAAEC,EAAY,OAAEC,EAAM,QAAEC,GAASH,EAAA,OAC/BR,EAAAA,EAAAA,MAACY,EAAAA,GAAI,CAAAnB,SAAA,EACDO,EAAAA,EAAAA,MAACa,EAAAA,EAAcC,MAAK,CAACtB,UAAU,OAAMC,SAAA,EACjCH,EAAAA,EAAAA,KAACuB,EAAAA,EAAcE,MAAK,CAAAtB,SAAC,UACrBH,EAAAA,EAAAA,KAAC0B,EAAAA,GAAK,CACFb,GAAIU,EAAAA,EAAcI,QAClBC,KAAK,OACLzC,KAAK,OACL0C,YAAY,kBACZC,UAAWV,EAAOjC,MAAQkC,EAAQlC,OAErCiC,EAAOjC,MAAQkC,EAAQlC,OACpBa,EAAAA,EAAAA,KAACuB,EAAAA,EAAcI,QAAQI,SAAQ,CAACH,KAAK,UAASzB,SACzCiB,EAAOjC,WAKpBuB,EAAAA,EAAAA,MAACa,EAAAA,EAAcC,MAAK,CAACtB,UAAU,OAAMC,SAAA,EACjCH,EAAAA,EAAAA,KAACuB,EAAAA,EAAcE,MAAK,CAAAtB,SAAC,WACrBH,EAAAA,EAAAA,KAAC0B,EAAAA,GAAK,CACFb,GAAIU,EAAAA,EAAcI,QAClBC,KAAK,QACLzC,KAAK,QACL0C,YAAY,mBACZC,UAAWV,EAAOhC,OAASiC,EAAQjC,QAEtCgC,EAAOhC,OAASiC,EAAQjC,QACrBY,EAAAA,EAAAA,KAACuB,EAAAA,EAAcI,QAAQI,SAAQ,CAACH,KAAK,UAASzB,SACzCiB,EAAOhC,YAKpBsB,EAAAA,EAAAA,MAACa,EAAAA,EAAcC,MAAK,CAACtB,UAAU,OAAMC,SAAA,EACjCH,EAAAA,EAAAA,KAACuB,EAAAA,EAAcE,MAAK,CAAAtB,SAAC,kBACrBH,EAAAA,EAAAA,KAAC0B,EAAAA,GAAK,CACFb,GAAIU,EAAAA,EAAcI,QAClBC,KAAK,MACLzC,KAAK,cACL0C,YAAY,sCACZC,UAAWV,EAAO/B,aAAegC,EAAQhC,cAE5C+B,EAAO/B,aAAegC,EAAQhC,cAC3BW,EAAAA,EAAAA,KAACuB,EAAAA,EAAcI,QAAQI,SAAQ,CAACH,KAAK,UAASzB,SACzCiB,EAAO/B,kBAKpBqB,EAAAA,EAAAA,MAACa,EAAAA,EAAcC,MAAK,CAACtB,UAAU,OAAMC,SAAA,EACjCH,EAAAA,EAAAA,KAACuB,EAAAA,EAAcE,MAAK,CAAAtB,SAAC,YACrBO,EAAAA,EAAAA,MAACgB,EAAAA,GAAK,CACFb,GAAIU,EAAAA,EAAcS,OAClB7C,KAAK,SACL2C,UAAWV,EAAO9B,QAAU+B,EAAQ/B,OAAOa,SAAA,EAE3CH,EAAAA,EAAAA,KAAA,UAAQiC,MAAM,GAAE9B,SAAC,mBACjCH,EAAAA,EAAAA,KAAA,UAAQiC,MAAM,OAAM9B,SAAC,UACrBH,EAAAA,EAAAA,KAAA,UAAQiC,MAAM,SAAQ9B,SAAC,YACPH,EAAAA,EAAAA,KAAA,UAAQiC,MAAM,QAAO9B,SAAC,aAEzBiB,EAAO9B,QAAU+B,EAAQ/B,SACtBU,EAAAA,EAAAA,KAACuB,EAAAA,EAAcI,QAAQI,SAAQ,CAACH,KAAK,UAASzB,SACzCiB,EAAO9B,aAKpBU,EAAAA,EAAAA,KAAA,OAAKE,UAAU,SAAQC,UACnBH,EAAAA,EAAAA,KAACkC,EAAAA,EAAM,CACHnB,QAAQ,UACRa,KAAK,SACLO,SAAUhB,GAAgBrC,EAC1BoB,UAAU,OAAMC,SAEfgB,GAAgBrC,GACb4B,EAAAA,EAAAA,MAAA0B,EAAAA,SAAA,CAAAjC,SAAA,EACIH,EAAAA,EAAAA,KAACqC,EAAAA,EAAc,CAACC,KAAM,GAAIvB,QAAQ,eAClCf,EAAAA,EAAAA,KAAA,QAAME,UAAU,OAAMC,SAAC,sBAE3B,iBAGzB,KAICO,EAAAA,EAAAA,MAAA,OAAKR,UAAU,cAAaC,SAAA,EACxBH,EAAAA,EAAAA,KAAA,KAAGE,UAAU,kBAAiBC,SAAC,uBAC/BO,EAAAA,EAAAA,MAAA,OAAKR,UAAU,sCAAqCC,SAAA,EAChDO,EAAAA,EAAAA,MAACwB,EAAAA,EAAM,CACHnB,QAAQ,SACRwB,QAASA,IAAMC,OAAOC,SAASC,KAAO,8CAAoDvC,SAAA,EAE1FH,EAAAA,EAAAA,KAAA,KAAGE,UAAU,sBAAwB,aAGzCQ,EAAAA,EAAAA,MAACwB,EAAAA,EAAM,CACHnB,QAAQ,UACRwB,QAASA,IAAMC,OAAOC,SAASC,KAAO,gDAAsDvC,SAAA,EAE5FH,EAAAA,EAAAA,KAAA,KAAGE,UAAU,wBAA0B,8BAS3D,C,oECvJb,MAAMhB,EAAUgC,IAKG,IALgB,cACtCjC,EAAa,SACbM,EAAQ,UACRC,EAAS,QACTmD,GACgBzB,EAChB,MAAOpC,EAAS8D,IAAcC,EAAAA,EAAAA,WAAS,IAChC9D,EAAO+D,IAAYD,EAAAA,EAAAA,UAAwB,MAE5C7D,GAAe+D,EAAAA,EAAAA,cAAYC,MAC7BC,EAASC,KAEP,IADF,cAAEC,EAAa,UAAEC,GAA6BF,EAE9CN,GAAW,GACXE,EAAS,MACT,IACI,MAAMO,QAAiBC,EAAAA,EAAAA,IAAkB/D,EAAU0D,IACnDM,EAAAA,EAAAA,GAAiBF,EAASG,SACtBhE,GAAWA,EAAU6D,GACzBD,GACJ,CAAE,MAAOrE,GACL,MAAM0E,GAAeC,EAAAA,EAAAA,GAAe3E,GACpC+D,EAASW,GACLd,GAASA,EAAQ5D,EACzB,CAAC,QACG6D,GAAW,GACXO,GAAc,EAClB,IACD,CAAC5D,EAAUC,EAAWmD,IAEzB,MAAO,CACH7D,UACAC,QACAC,eACAC,gBACH,C,qFClDE,MAAMa,EAAoBJ,EAAAA,KAC5BiE,QAAQ,cAAe,kCACvBC,SAAS,4BAED7D,EAAeL,EAAAA,KACvBmE,MAAM,CAAC,OAAQ,SAAU,SAAU,gCACnCD,SAAS,sBAED/D,EAAcH,EAAAA,KACtBN,MAAM,iBACNwE,SAAS,qBAEDhE,EAAaF,EAAAA,KACrBoE,IAAI,EAAG,cACPC,IAAI,GAAI,aACRH,SAAS,oBAEDI,EAActE,EAAAA,KAAaC,MAAM,CAC1CsE,UAAWvE,EAAAA,KACNoE,IAAI,EAAG,cACPC,IAAI,IAAK,aACTH,SAAS,0BACdM,cAAexE,EAAAA,KACVoE,IAAI,EAAG,cACPC,IAAI,IAAK,aACTH,SAAS,8BACdO,UAAWzE,EAAAA,KACNkE,SAAS,0BACTQ,KAAK,cAAe,oCAAoC,SAASnC,GAC9D,IAAKA,EAAO,OAAO,EACnB,MAAMoC,EAAQ,IAAIC,KAClBD,EAAME,SAAS,EAAG,EAAG,EAAG,GACxB,MAAMJ,EAAY,IAAIG,KAAKrC,GAE3B,OADAkC,EAAUI,SAAS,EAAG,EAAG,EAAG,GACrBJ,GAAaE,CACxB,MAGmB3E,EAAAA,KAAaC,MAAM,CAC1C6E,MAAO9E,EAAAA,KACFkE,SAAS,qBACda,YAAa/E,EAAAA,KACRgF,IAAI,+BACJd,SAAS,6B","sources":["components/RegistrationPage.tsx","hooks/useForm.ts","utils/validation.ts"],"sourcesContent":["import React from 'react';\nimport { Formik, Field, Form } from 'formik';\nimport * as Yup from 'yup';\nimport { useNavigate } from 'react-router-dom';\nimport { Container, Row, Col, Card, Button, Form as BootstrapForm, Alert } from 'react-bootstrap';\nimport { useForm } from '../hooks/useForm';\nimport { nameSchema, emailSchema, phoneNumberSchema, genderSchema } from '../utils/validation';\nimport LoadingSpinner from './LoadingSpinner';\n\ninterface RegistrationFormValues {\n    name: string;\n    email: string;\n    phoneNumber: string;\n    gender: string;\n}\n\nconst RegistrationPage: React.FC = () => {\n    const navigate = useNavigate();\n\n    const { loading, error, handleSubmit, initialValues } = useForm<RegistrationFormValues>({\n        initialValues: {\n                    name: '',\n                    email: '',\n                    phoneNumber: '',\n                    gender: '',\n        },\n        endpoint: '/user/register',\n        onSuccess: () => navigate('/genre-selection')\n    });\n\n    const validationSchema = Yup.object().shape({\n        name: nameSchema,\n        email: emailSchema,\n        phoneNumber: phoneNumberSchema,\n        gender: genderSchema,\n    });\n\n    return (\n        <Container className=\"mt-5\">\n            <Row className=\"justify-content-center\">\n                <Col xs={12} md={8} lg={6}>\n                    <Card className=\"shadow-sm\">\n                        <Card.Body className=\"p-4\">\n                            <Card.Title as=\"h1\" className=\"text-center mb-4\">Registration</Card.Title>\n                            \n                            {error && (\n                                <Alert variant=\"danger\" className=\"mb-4\">\n                                    <i className=\"bi bi-exclamation-triangle-fill me-2\"></i>\n                                    {error}\n                                </Alert>\n                            )}\n\n                            <Formik\n                                initialValues={initialValues}\n                                validationSchema={validationSchema}\n                                onSubmit={handleSubmit}\n            >\n                                {({ isSubmitting, errors, touched }) => (\n                                    <Form>\n                                        <BootstrapForm.Group className=\"mb-3\">\n                                            <BootstrapForm.Label>Name</BootstrapForm.Label>\n                                            <Field\n                                                as={BootstrapForm.Control}\n                                                type=\"text\"\n                                                name=\"name\"\n                                                placeholder=\"Enter your name\"\n                                                isInvalid={errors.name && touched.name}\n                                            />\n                                            {errors.name && touched.name && (\n                                                <BootstrapForm.Control.Feedback type=\"invalid\">\n                                                    {errors.name}\n                                                </BootstrapForm.Control.Feedback>\n                                            )}\n                                        </BootstrapForm.Group>\n\n                                        <BootstrapForm.Group className=\"mb-3\">\n                                            <BootstrapForm.Label>Email</BootstrapForm.Label>\n                                            <Field\n                                                as={BootstrapForm.Control}\n                                                type=\"email\"\n                                                name=\"email\"\n                                                placeholder=\"Enter your email\"\n                                                isInvalid={errors.email && touched.email}\n                                            />\n                                            {errors.email && touched.email && (\n                                                <BootstrapForm.Control.Feedback type=\"invalid\">\n                                                    {errors.email}\n                                                </BootstrapForm.Control.Feedback>\n                                            )}\n                                        </BootstrapForm.Group>\n\n                                        <BootstrapForm.Group className=\"mb-3\">\n                                            <BootstrapForm.Label>Phone Number</BootstrapForm.Label>\n                                            <Field\n                                                as={BootstrapForm.Control}\n                                                type=\"tel\"\n                                                name=\"phoneNumber\"\n                                                placeholder=\"Enter your phone number (10 digits)\"\n                                                isInvalid={errors.phoneNumber && touched.phoneNumber}\n                                            />\n                                            {errors.phoneNumber && touched.phoneNumber && (\n                                                <BootstrapForm.Control.Feedback type=\"invalid\">\n                                                    {errors.phoneNumber}\n                                                </BootstrapForm.Control.Feedback>\n                                            )}\n                                        </BootstrapForm.Group>\n\n                                        <BootstrapForm.Group className=\"mb-3\">\n                                            <BootstrapForm.Label>Gender</BootstrapForm.Label>\n                                            <Field\n                                                as={BootstrapForm.Select}\n                                                name=\"gender\"\n                                                isInvalid={errors.gender && touched.gender}\n                                            >\n                                                <option value=\"\">Select Gender</option>\n                                <option value=\"male\">Male</option>\n                                <option value=\"female\">Female</option>\n                                                <option value=\"other\">Other</option>\n                            </Field>\n                                            {errors.gender && touched.gender && (\n                                                <BootstrapForm.Control.Feedback type=\"invalid\">\n                                                    {errors.gender}\n                                                </BootstrapForm.Control.Feedback>\n                                            )}\n                                        </BootstrapForm.Group>\n\n                                        <div className=\"d-grid\">\n                                            <Button\n                                                variant=\"primary\"\n                                                type=\"submit\"\n                                                disabled={isSubmitting || loading}\n                                                className=\"mb-3\"\n                                            >\n                                                {isSubmitting || loading ? (\n                                                    <>\n                                                        <LoadingSpinner size={20} variant=\"bootstrap\" />\n                                                        <span className=\"ms-2\">Registering...</span>\n                                                    </>\n                                                ) : 'Register'}\n                                            </Button>\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n\n                            <div className=\"text-center\">\n                                <p className=\"text-muted mb-3\">Or register with:</p>\n                                <div className=\"d-flex justify-content-center gap-2\">\n                                    <Button \n                                        variant=\"danger\"\n                                        onClick={() => window.location.href = `${process.env.REACT_APP_API_URL}/user/auth/google`}\n                                    >\n                                        <i className=\"bi bi-google me-2\"></i>\n                                        Google\n                                    </Button>\n                                    <Button \n                                        variant=\"primary\"\n                                        onClick={() => window.location.href = `${process.env.REACT_APP_API_URL}/user/auth/facebook`}\n                                    >\n                                        <i className=\"bi bi-facebook me-2\"></i>\n                                        Facebook\n                                    </Button>\n            </div>\n        </div>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default RegistrationPage;\n","import { useState, useCallback } from 'react';\nimport { FormikHelpers } from 'formik';\nimport { handleApiError, handleApiSuccess } from '../utils/errorHandler';\nimport { post } from '../utils/apiClient';\n\ninterface ApiResponse {\n    message: string;\n    [key: string]: any;\n}\n\ninterface UseFormOptions<T> {\n    initialValues: T;\n    endpoint: string;\n    onSuccess?: (response: ApiResponse) => void;\n    onError?: (error: any) => void;\n}\n\nexport const useForm = <T extends object>({\n    initialValues,\n    endpoint,\n    onSuccess,\n    onError\n}: UseFormOptions<T>) => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState<string | null>(null);\n\n    const handleSubmit = useCallback(async (\n        values: T,\n        { setSubmitting, resetForm }: FormikHelpers<T>\n    ) => {\n        setLoading(true);\n        setError(null);\n        try {\n            const response = await post<ApiResponse>(endpoint, values);\n            handleApiSuccess(response.message);\n            if (onSuccess) onSuccess(response);\n            resetForm();\n        } catch (error) {\n            const errorMessage = handleApiError(error);\n            setError(errorMessage);\n            if (onError) onError(error);\n        } finally {\n            setLoading(false);\n            setSubmitting(false);\n        }\n    }, [endpoint, onSuccess, onError]);\n\n    return {\n        loading,\n        error,\n        handleSubmit,\n        initialValues\n    };\n}; ","import * as Yup from 'yup';\r\n\r\nexport const phoneNumberSchema = Yup.string()\r\n    .matches(/^[0-9]{10}$/, 'Phone number must be 10 digits')\r\n    .required('Phone number is required');\r\n\r\nexport const genderSchema = Yup.string()\r\n    .oneOf(['male', 'female', 'other'], 'Please select a valid gender')\r\n    .required('Gender is required');\r\n\r\nexport const emailSchema = Yup.string()\r\n    .email('Invalid email')\r\n    .required('Email is required');\r\n\r\nexport const nameSchema = Yup.string()\r\n    .min(2, 'Too Short!')\r\n    .max(50, 'Too Long!')\r\n    .required('Name is required');\r\n\r\nexport const eventSchema = Yup.object().shape({\r\n    eventName: Yup.string()\r\n        .min(2, 'Too Short!')\r\n        .max(100, 'Too Long!')\r\n        .required('Event name is required'),\r\n    eventLocation: Yup.string()\r\n        .min(2, 'Too Short!')\r\n        .max(200, 'Too Long!')\r\n        .required('Event location is required'),\r\n    eventDate: Yup.date()\r\n        .required('Event date is required')\r\n        .test('is-not-past', 'Event date cannot be in the past', function(value) {\r\n            if (!value) return false;\r\n            const today = new Date();\r\n            today.setHours(0, 0, 0, 0);\r\n            const eventDate = new Date(value);\r\n            eventDate.setHours(0, 0, 0, 0);\r\n            return eventDate >= today;\r\n        }),\r\n});\r\n\r\nexport const genreSchema = Yup.object().shape({\r\n    genre: Yup.string()\r\n        .required('Genre is required'),\r\n    youtubeLink: Yup.string()\r\n        .url('Must be a valid YouTube URL')\r\n        .required('YouTube link is required'),\r\n});\r\n\r\nexport const validateEmail = (email: string): boolean => {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n};\r\n\r\nexport const validatePassword = (password: string): boolean => {\r\n    // At least 8 characters, 1 uppercase, 1 lowercase, 1 number\r\n    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/;\r\n    return passwordRegex.test(password);\r\n};\r\n\r\nexport const validateName = (name: string): boolean => {\r\n    return name.length >= 2 && name.length <= 50;\r\n};\r\n\r\nexport const validateEventName = (name: string): boolean => {\r\n    return name.length >= 3 && name.length <= 100;\r\n};\r\n\r\nexport const validateEventDescription = (description: string): boolean => {\r\n    return description.length >= 10 && description.length <= 1000;\r\n};\r\n\r\nexport const validateEventDate = (date: string): boolean => {\r\n    const eventDate = new Date(date);\r\n    eventDate.setHours(0, 0, 0, 0);\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n    return eventDate >= today;\r\n}; "],"names":["RegistrationPage","navigate","useNavigate","loading","error","handleSubmit","initialValues","useForm","name","email","phoneNumber","gender","endpoint","onSuccess","validationSchema","Yup","shape","nameSchema","emailSchema","phoneNumberSchema","genderSchema","_jsx","Container","className","children","Row","Col","xs","md","lg","Card","_jsxs","Body","Title","as","Alert","variant","Formik","onSubmit","_ref","isSubmitting","errors","touched","Form","BootstrapForm","Group","Label","Field","Control","type","placeholder","isInvalid","Feedback","Select","value","Button","disabled","_Fragment","LoadingSpinner","size","onClick","window","location","href","onError","setLoading","useState","setError","useCallback","async","values","_ref2","setSubmitting","resetForm","response","post","handleApiSuccess","message","errorMessage","handleApiError","matches","required","oneOf","min","max","eventSchema","eventName","eventLocation","eventDate","test","today","Date","setHours","genre","youtubeLink","url"],"sourceRoot":""}