{"version":3,"file":"static/js/118.c5c64da6.chunk.js","mappings":"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","sources":["components/ProfileCompletionPage.tsx","hooks/useForm.ts","utils/validation.ts"],"sourcesContent":["import React from 'react';\nimport { Formik, Field, Form } from 'formik';\nimport * as Yup from 'yup';\nimport { useNavigate } from 'react-router-dom';\nimport { Container, Row, Col, Card, Button, Form as BootstrapForm, Alert } from 'react-bootstrap';\nimport { useForm } from '../hooks/useForm';\nimport { phoneNumberSchema, genderSchema } from '../utils/validation';\nimport LoadingSpinner from './LoadingSpinner';\n\ninterface ProfileFormValues {\n    phoneNumber: string;\n    gender: string;\n}\n\nconst ProfileCompletionPage: React.FC = () => {\n    const navigate = useNavigate();\n\n    const { loading, error, handleSubmit, initialValues } = useForm<ProfileFormValues>({\n        initialValues: {\n            phoneNumber: '',\n            gender: '',\n        },\n        endpoint: '/user/update-profile',\n        onSuccess: () => navigate('/confirmation')\n    });\n\n    const validationSchema = Yup.object().shape({\n        phoneNumber: phoneNumberSchema,\n        gender: genderSchema,\n    });\n\n    return (\n        <Container className=\"mt-5\">\n            <Row className=\"justify-content-center\">\n                <Col xs={12} md={8} lg={6}>\n                    <Card className=\"shadow-sm\">\n                        <Card.Body className=\"p-4\">\n                            <Card.Title as=\"h2\" className=\"text-center mb-4\">Complete Your Profile</Card.Title>\n                            <Card.Text className=\"text-center text-muted mb-4\">\n                                Please provide your phone number and gender to complete your profile setup.\n                            </Card.Text>\n                            \n                            {error && (\n                                <Alert variant=\"danger\" className=\"mb-4\">\n                                    <i className=\"bi bi-exclamation-triangle-fill me-2\"></i>\n                                    {error}\n                                </Alert>\n                            )}\n\n                            <Formik\n                                initialValues={initialValues}\n                                validationSchema={validationSchema}\n                                onSubmit={handleSubmit}\n                            >\n                                {({ isSubmitting, errors, touched }) => (\n                                    <Form>\n                                        <BootstrapForm.Group className=\"mb-4\">\n                                            <BootstrapForm.Label className=\"fw-bold\">Phone Number</BootstrapForm.Label>\n                                            <Field\n                                                as={BootstrapForm.Control}\n                                type=\"tel\"\n                                                name=\"phoneNumber\"\n                                                placeholder=\"Enter your phone number (10 digits)\"\n                                                isInvalid={errors.phoneNumber && touched.phoneNumber}\n                                                className=\"py-2\"\n                                            />\n                                            {errors.phoneNumber && touched.phoneNumber && (\n                                                <BootstrapForm.Control.Feedback type=\"invalid\">\n                                                    <i className=\"bi bi-exclamation-circle-fill me-2\"></i>\n                                                    {errors.phoneNumber}\n                                                </BootstrapForm.Control.Feedback>\n                                            )}\n                                        </BootstrapForm.Group>\n\n                                        <BootstrapForm.Group className=\"mb-4\">\n                                            <BootstrapForm.Label className=\"fw-bold\">Gender</BootstrapForm.Label>\n                                            <Field\n                                                as={BootstrapForm.Select}\n                                                name=\"gender\"\n                                                isInvalid={errors.gender && touched.gender}\n                                                className=\"py-2\"\n                            >\n                                <option value=\"\">Select Gender</option>\n                                <option value=\"male\">Male</option>\n                                <option value=\"female\">Female</option>\n                                <option value=\"other\">Other</option>\n                                            </Field>\n                                            {errors.gender && touched.gender && (\n                                                <BootstrapForm.Control.Feedback type=\"invalid\">\n                                                    <i className=\"bi bi-exclamation-circle-fill me-2\"></i>\n                                                    {errors.gender}\n                                                </BootstrapForm.Control.Feedback>\n                                            )}\n                                        </BootstrapForm.Group>\n\n                        <div className=\"d-grid\">\n                            <Button\n                                variant=\"primary\"\n                                type=\"submit\"\n                                                disabled={isSubmitting || loading}\n                                                size=\"lg\"\n                                                className=\"py-2\"\n                            >\n                                                {isSubmitting || loading ? (\n                                                    <>\n                                                        <LoadingSpinner size={20} variant=\"bootstrap\" />\n                                                        <span className=\"ms-2\">Completing Profile...</span>\n                                                    </>\n                                                ) : (\n                                                    <>\n                                                        <i className=\"bi bi-check-circle-fill me-2\"></i>\n                                                        Complete Profile\n                                                    </>\n                                                )}\n                            </Button>\n                        </div>\n                    </Form>\n                                )}\n                            </Formik>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default ProfileCompletionPage;\n","import { useState, useCallback } from 'react';\nimport { FormikHelpers } from 'formik';\nimport { handleApiError, handleApiSuccess } from '../utils/errorHandler';\nimport { post } from '../utils/apiClient';\n\ninterface ApiResponse {\n    message: string;\n    [key: string]: any;\n}\n\ninterface UseFormOptions<T> {\n    initialValues: T;\n    endpoint: string;\n    onSuccess?: (response: ApiResponse) => void;\n    onError?: (error: any) => void;\n}\n\nexport const useForm = <T extends object>({\n    initialValues,\n    endpoint,\n    onSuccess,\n    onError\n}: UseFormOptions<T>) => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState<string | null>(null);\n\n    const handleSubmit = useCallback(async (\n        values: T,\n        { setSubmitting, resetForm }: FormikHelpers<T>\n    ) => {\n        setLoading(true);\n        setError(null);\n        try {\n            const response = await post<ApiResponse>(endpoint, values);\n            handleApiSuccess(response.message);\n            if (onSuccess) onSuccess(response);\n            resetForm();\n        } catch (error) {\n            const errorMessage = handleApiError(error);\n            setError(errorMessage);\n            if (onError) onError(error);\n        } finally {\n            setLoading(false);\n            setSubmitting(false);\n        }\n    }, [endpoint, onSuccess, onError]);\n\n    return {\n        loading,\n        error,\n        handleSubmit,\n        initialValues\n    };\n}; ","import * as Yup from 'yup';\r\n\r\nexport const phoneNumberSchema = Yup.string()\r\n    .matches(/^[0-9]{10}$/, 'Phone number must be 10 digits')\r\n    .required('Phone number is required');\r\n\r\nexport const genderSchema = Yup.string()\r\n    .oneOf(['male', 'female', 'other'], 'Please select a valid gender')\r\n    .required('Gender is required');\r\n\r\nexport const emailSchema = Yup.string()\r\n    .email('Invalid email')\r\n    .required('Email is required');\r\n\r\nexport const nameSchema = Yup.string()\r\n    .min(2, 'Too Short!')\r\n    .max(50, 'Too Long!')\r\n    .required('Name is required');\r\n\r\nexport const eventSchema = Yup.object().shape({\r\n    eventName: Yup.string()\r\n        .min(2, 'Too Short!')\r\n        .max(100, 'Too Long!')\r\n        .required('Event name is required'),\r\n    eventLocation: Yup.string()\r\n        .min(2, 'Too Short!')\r\n        .max(200, 'Too Long!')\r\n        .required('Event location is required'),\r\n    eventDate: Yup.date()\r\n        .required('Event date is required')\r\n        .test('is-not-past', 'Event date cannot be in the past', function(value) {\r\n            if (!value) return false;\r\n            const today = new Date();\r\n            today.setHours(0, 0, 0, 0);\r\n            const eventDate = new Date(value);\r\n            eventDate.setHours(0, 0, 0, 0);\r\n            return eventDate >= today;\r\n        }),\r\n});\r\n\r\nexport const genreSchema = Yup.object().shape({\r\n    genre: Yup.string()\r\n        .required('Genre is required'),\r\n    youtubeLink: Yup.string()\r\n        .url('Must be a valid YouTube URL')\r\n        .required('YouTube link is required'),\r\n});\r\n\r\nexport const validateEmail = (email: string): boolean => {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n};\r\n\r\nexport const validatePassword = (password: string): boolean => {\r\n    // At least 8 characters, 1 uppercase, 1 lowercase, 1 number\r\n    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/;\r\n    return passwordRegex.test(password);\r\n};\r\n\r\nexport const validateName = (name: string): boolean => {\r\n    return name.length >= 2 && name.length <= 50;\r\n};\r\n\r\nexport const validateEventName = (name: string): boolean => {\r\n    return name.length >= 3 && name.length <= 100;\r\n};\r\n\r\nexport const validateEventDescription = (description: string): boolean => {\r\n    return description.length >= 10 && description.length <= 1000;\r\n};\r\n\r\nexport const validateEventDate = (date: string): boolean => {\r\n    const eventDate = new Date(date);\r\n    eventDate.setHours(0, 0, 0, 0);\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n    return eventDate >= today;\r\n}; "],"names":["ProfileCompletionPage","navigate","useNavigate","loading","error","handleSubmit","initialValues","useForm","phoneNumber","gender","endpoint","onSuccess","validationSchema","Yup","shape","phoneNumberSchema","genderSchema","_jsx","Container","className","children","Row","Col","xs","md","lg","Card","_jsxs","Body","Title","as","Text","Alert","variant","Formik","onSubmit","_ref","isSubmitting","errors","touched","Form","BootstrapForm","Group","Label","Field","Control","type","name","placeholder","isInvalid","Feedback","Select","value","Button","disabled","size","_Fragment","LoadingSpinner","onError","setLoading","useState","setError","useCallback","async","values","_ref2","setSubmitting","resetForm","response","post","handleApiSuccess","message","errorMessage","handleApiError","matches","required","oneOf","emailSchema","email","nameSchema","min","max","eventSchema","eventName","eventLocation","eventDate","test","today","Date","setHours","genre","youtubeLink","url"],"sourceRoot":""}