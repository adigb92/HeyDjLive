{"version":3,"file":"static/js/884.c2fedfa6.chunk.js","mappings":"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","sources":["components/GenreSelectionPage.tsx"],"sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport GenreContext from './GenreContext';\nimport UserContext from './UserContext';\nimport { post } from '../utils/apiClient';\nimport { handleApiError, handleApiSuccess } from '../utils/errorHandler';\nimport LoadingSpinner from './LoadingSpinner';\nimport { Container, Card, Button, Form, Alert } from 'react-bootstrap';\nimport '../styles/GenreSelectionPage.css';\n\nconst genres = [\"Oriental\", \"Hip-hop\", \"Latin\", \"Trance\", \"Techno\", \"Israeli\", \"80s\"];\n\nconst GenreSelectionPage = () => {\n    const { setGenre } = useContext(GenreContext);\n    const { user, updateUser, loading: userLoading, refreshAuth } = useContext(UserContext);\n    const navigate = useNavigate();\n    const location = useLocation();\n    const [youtubeLink, setYoutubeLink] = useState(\"\");\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState<string | null>(null);\n    const [eventId, setEventId] = useState<string | null>(null);\n\n    useEffect(() => {\n        console.log('GenreSelectionPage: useEffect triggered');\n        console.log('GenreSelectionPage: Current user context:', user);\n        console.log('GenreSelectionPage: User loading state:', userLoading);\n        console.log('GenreSelectionPage: Current location:', location);\n        \n        // Check if we're coming from an event QR scan\n        const params = new URLSearchParams(location.search);\n        const eventIdParam = params.get('eventId');\n        console.log('GenreSelectionPage: eventId from URL params:', eventIdParam);\n        \n        // Also check sessionStorage for eventId from QR scan\n        const pendingEventData = sessionStorage.getItem('pendingEventData');\n        console.log('GenreSelectionPage: pendingEventData from sessionStorage:', pendingEventData);\n        \n        let eventIdFromStorage = null;\n        \n        if (pendingEventData) {\n            try {\n                const data = JSON.parse(pendingEventData);\n                eventIdFromStorage = data.eventId;\n                console.log('GenreSelectionPage: eventId from sessionStorage:', eventIdFromStorage);\n            } catch (error) {\n                console.error('GenreSelectionPage: Error parsing pending event data:', error);\n            }\n        }\n        \n        // Use eventId from URL params first, then from sessionStorage\n        const finalEventId = eventIdParam || eventIdFromStorage;\n        if (finalEventId) {\n            setEventId(finalEventId);\n            console.log('GenreSelectionPage: Event ID set from QR scan:', finalEventId);\n        } else {\n            console.log('GenreSelectionPage: No event ID found, user may not be in event context');\n        }\n    }, [location, user, userLoading]);\n\n    const handleGenreSelection = async (genre: string) => {\n        console.log('GenreSelectionPage: handleGenreSelection called with genre:', genre);\n        console.log('GenreSelectionPage: Current user:', user);\n        console.log('GenreSelectionPage: Current eventId:', eventId);\n        \n        setLoading(true);\n        setError(null);\n        setGenre(genre);\n        \n        try {\n            // Check if user is available\n            if (!user || !user._id) {\n                console.error('GenreSelectionPage: User not authenticated');\n                setError('User not authenticated. Please log in again.');\n                setLoading(false);\n                return;\n            }\n\n            console.log('GenreSelectionPage: User authenticated, proceeding with genre selection');\n\n            // If in event context, ensure the user is assigned to the event before updating genre\n            if (eventId) {\n                try {\n                    const pendingEventDataRaw = sessionStorage.getItem('pendingEventData');\n                    let djId: string | undefined = undefined;\n                    if (pendingEventDataRaw) {\n                        try {\n                            const pending = JSON.parse(pendingEventDataRaw);\n                            djId = pending?.djId;\n                        } catch (_e) {}\n                    }\n\n                    console.log('GenreSelectionPage: Ensuring registration for eventId:', eventId, 'djId:', djId);\n                    await post('/events/assign-user', {\n                        eventId,\n                        userId: user._id,\n                        ...(djId ? { djId } : {})\n                    });\n                    console.log('GenreSelectionPage: Assignment ensured (or already registered).');\n                } catch (assignErr: any) {\n                    const msg = (assignErr && assignErr.response && assignErr.response.data && assignErr.response.data.message) || '';\n                    if (typeof msg === 'string' && msg.toLowerCase().includes('already registered')) {\n                        console.log('GenreSelectionPage: User already registered for event, continuing.');\n                    } else {\n                        console.warn('GenreSelectionPage: Assignment preflight failed (continuing to genre update anyway):', assignErr);\n                    }\n                }\n            }\n\n            // First update the user's genre preference\n            const response = await post<{ user: any; profileCompleted: boolean; message: string }>(\n                '/user/update-genre',\n                { genre, youtubeLink }\n            );\n            \n            console.log('GenreSelectionPage: Genre update response:', response);\n            \n            if (response.user) {\n                updateUser(response.user);\n                handleApiSuccess(response.message);\n\n                // If we're in an event context, update the event's genre stats (consolidated endpoint)\n                if (eventId) {\n                    console.log('GenreSelectionPage: Updating event genre stats for eventId:', eventId);\n                    try {\n                        await post(`/events/${eventId}/genre-select`, {\n                            genreChoice: genre,\n                            youtubeLink\n                        });\n                        console.log('GenreSelectionPage: Event genre stats updated successfully');\n                    } catch (eventError) {\n                        console.error('GenreSelectionPage: Error updating event genre stats:', eventError);\n                        // Don't fail the whole operation if event update fails\n                    }\n                } else {\n                    console.log('GenreSelectionPage: No eventId, skipping event genre stats update');\n                }\n\n                // Navigate to confirmation if profile is completed (effective), include context\n                const effectiveProfileCompleted = Boolean(\n                    response.profileCompleted ||\n                    (response.user && (response.user.phoneNumber || response.user.gender)) ||\n                    (response.user && response.user.isProfileComplete === true)\n                );\n                if (effectiveProfileCompleted) {\n                    const pendingEventDataRaw = sessionStorage.getItem('pendingEventData');\n                    let djId: string | undefined = undefined;\n                    if (pendingEventDataRaw) {\n                        try {\n                            const pending = JSON.parse(pendingEventDataRaw);\n                            djId = pending?.djId;\n                        } catch (_e) {}\n                    }\n                    const query = eventId ? `?eventId=${eventId}${djId ? `&djId=${djId}` : ''}` : '';\n                    console.log('GenreSelectionPage: Navigating to /confirmation' + query);\n                    navigate('/confirmation' + query);\n                } else {\n                    console.log('GenreSelectionPage: Profile not completed, navigating to /complete-profile');\n                    navigate('/complete-profile');\n                }\n            }\n        } catch (error) {\n            console.error('GenreSelectionPage: Error in handleGenreSelection:', error);\n            const errorMessage = handleApiError(error);\n            setError(errorMessage);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    return (\n        <Container className=\"mt-4 mb-5 pb-5\">\n            <div className=\"text-center mb-4\">\n                <h1>Select Your Genre</h1>\n                <p className=\"lead\">What music would you like to listen to or share?</p>\n            </div>\n\n            {error && (\n                <Alert variant=\"danger\" className=\"mb-4\">\n                    <i className=\"bi bi-exclamation-triangle-fill me-2\"></i>\n                    {error}\n                </Alert>\n            )}\n\n            {/* Show loading state while user context is loading */}\n            {userLoading ? (\n                <div className=\"text-center\">\n                    <LoadingSpinner size={40} variant=\"bootstrap\" />\n                    <p className=\"mt-3\">Loading user information...</p>\n                </div>\n            ) : !user ? (\n                <>\n                    <Alert variant=\"warning\" className=\"mb-4\">\n                        <i className=\"bi bi-exclamation-triangle-fill me-2\"></i>\n                        User not authenticated. Please wait or refresh the page.\n                    </Alert>\n                    \n                    {/* Debug section */}\n                    <Card className=\"mb-4\">\n                        <Card.Body>\n                            <Card.Title>Debug Information</Card.Title>\n                            <div className=\"mb-3\">\n                                <strong>Token in localStorage:</strong> {localStorage.getItem('token') ? 'Token exists' : 'No token'}\n                            </div>\n                            <div className=\"mb-3\">\n                                <strong>User Context State:</strong> {JSON.stringify({ user, loading: userLoading })}\n                            </div>\n                            <Button \n                                variant=\"info\" \n                                onClick={refreshAuth}\n                                className=\"me-2\"\n                            >\n                                Refresh Authentication\n                            </Button>\n                            <Button \n                                variant=\"secondary\" \n                                onClick={() => window.location.reload()}\n                            >\n                                Reload Page\n                            </Button>\n                        </Card.Body>\n                    </Card>\n                </>\n            ) : (\n                <>\n                    <div className=\"row g-4 mb-4\">\n                        {genres.map((genre, index) => (\n                            <div key={index} className=\"col-sm-12 col-md-6 col-lg-4\">\n                                <Card className=\"h-100\">\n                                    <Card.Body className=\"d-flex flex-column\">\n                                        <Card.Title className=\"text-center\">{genre}</Card.Title>\n                                        <Button \n                                            variant=\"primary\" \n                                            className=\"mt-auto\"\n                                            onClick={() => handleGenreSelection(genre)}\n                                            disabled={loading}\n                                        >\n                                            {loading ? (\n                                                <>\n                                                    <LoadingSpinner size={20} variant=\"bootstrap\" />\n                                                    <span className=\"ms-2\">Selecting...</span>\n                                                </>\n                                            ) : 'Select'}\n                                        </Button>\n                                    </Card.Body>\n                                </Card>\n                            </div>\n                        ))}\n                    </div>\n\n                    <Card className=\"mt-4\">\n                        <Card.Body>\n                            <Card.Title>Custom Genre and YouTube Link</Card.Title>\n                            <Form.Group className=\"mb-3\">\n                                <Form.Label>YouTube Link</Form.Label>\n                                <Form.Control\n                                    type=\"text\"\n                                    placeholder=\"Paste a YouTube link here\"\n                                    value={youtubeLink}\n                                    onChange={(e) => setYoutubeLink(e.target.value)}\n                                />\n                            </Form.Group>\n                            <Button \n                                variant=\"success\" \n                                onClick={() => handleGenreSelection(\"Custom\")}\n                                disabled={loading}\n                                className=\"w-100\"\n                            >\n                                {loading ? (\n                                    <>\n                                        <LoadingSpinner size={20} variant=\"bootstrap\" />\n                                        <span className=\"ms-2\">Submitting...</span>\n                                    </>\n                                ) : 'Submit Custom Genre and Link'}\n                            </Button>\n                        </Card.Body>\n                    </Card>\n                </>\n            )}\n        </Container>\n    );\n};\n\nexport default GenreSelectionPage;\n"],"names":["genres","GenreSelectionPage","setGenre","useContext","GenreContext","user","updateUser","loading","userLoading","refreshAuth","UserContext","navigate","useNavigate","location","useLocation","youtubeLink","setYoutubeLink","useState","setLoading","error","setError","eventId","setEventId","useEffect","console","log","eventIdParam","URLSearchParams","search","get","pendingEventData","sessionStorage","getItem","eventIdFromStorage","JSON","parse","finalEventId","handleGenreSelection","async","genre","_id","pendingEventDataRaw","djId","pending","_e","post","userId","assignErr","msg","response","data","message","toLowerCase","includes","warn","handleApiSuccess","genreChoice","eventError","Boolean","profileCompleted","phoneNumber","gender","isProfileComplete","query","errorMessage","handleApiError","_jsxs","Container","className","children","_jsx","Alert","variant","LoadingSpinner","size","_Fragment","map","index","Card","Body","Title","Button","onClick","disabled","Form","Group","Label","Control","type","placeholder","value","onChange","e","target","localStorage","stringify","window","reload"],"sourceRoot":""}