{"version":3,"file":"static/js/375.073b8a34.chunk.js","mappings":"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","sources":["components/LoginPage.tsx"],"sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport UserContext from './UserContext';\nimport { post } from '../utils/apiClient';\nimport { handleApiError, handleApiSuccess } from '../utils/errorHandler';\nimport LoadingSpinner from './LoadingSpinner';\nimport { Container, Row, Col, Card, Form, Button, Alert } from 'react-bootstrap';\nimport * as Yup from 'yup';\n\nconst emailSchema = Yup.string()\n    .email('Please enter a valid email address')\n    .required('Email is required');\n\nconst LoginPage = () => {\n    const [email, setEmail] = useState('');\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState('');\n    const navigate = useNavigate();\n    const { user, loading: authLoading, updateUser } = useContext(UserContext);\n\n    useEffect(() => {\n        if (user) {\n            // If user is authenticated via OAuth and hasn't completed profile, go to profile completion\n            if (user.authProvider && !user.isProfileComplete) {\n                navigate('/profile-completion');\n            } else {\n                    navigate('/genre-selection');\n                }\n        }\n    }, [user, navigate]);\n\n    const handleLogin = async (event: React.FormEvent) => {\n        event.preventDefault();\n        setLoading(true);\n        setError('');\n\n        try {\n            await emailSchema.validate(email);\n            const response = await post<{ user: any; message: string; token: string }>('/user/login', { email });\n            \n            // Store the token\n            if (response.token) {\n                localStorage.setItem('token', response.token);\n            }\n            \n            updateUser(response.user);\n            handleApiSuccess(response.message);\n            \n            // If user is authenticated via OAuth and hasn't completed profile, go to profile completion\n            if (response.user.authProvider && !response.user.isProfileComplete) {\n                navigate('/profile-completion');\n            } else {\n                navigate('/genre-selection');\n            }\n        } catch (error) {\n            if (error instanceof Yup.ValidationError) {\n                setError(error.message);\n            } else {\n                setError(handleApiError(error));\n            }\n        } finally {\n            setLoading(false);\n            }\n    };\n\n    if (authLoading) {\n        return (\n            <Container className=\"mt-5\">\n                <Row className=\"justify-content-center\">\n                    <Col xs={12} className=\"text-center\">\n                        <LoadingSpinner size={40} variant=\"bootstrap\" />\n                        <p className=\"mt-3\">Checking authentication...</p>\n                    </Col>\n                </Row>\n            </Container>\n        );\n        }\n\n    return (\n        <Container className=\"mt-5\">\n            <Row className=\"justify-content-center\">\n                <Col xs={12} md={8} lg={6}>\n                    <Card className=\"shadow-sm\">\n                        <Card.Body className=\"p-4\">\n                            <Card.Title as=\"h1\" className=\"text-center mb-4\">Login</Card.Title>\n                            \n                            {error && <Alert variant=\"danger\">{error}</Alert>}\n                            \n                            <Form onSubmit={handleLogin}>\n                                <Form.Group className=\"mb-3\">\n                                    <Form.Label>Email</Form.Label>\n                                    <Form.Control\n                                        type=\"email\"\n                                        value={email}\n                                        onChange={e => setEmail(e.target.value)}\n                                        placeholder=\"Enter your email\"\n                                        isInvalid={!!error}\n                                    />\n                                </Form.Group>\n\n                                <div className=\"d-grid\">\n                                    <Button \n                                        variant=\"success\" \n                                        type=\"submit\"\n                                        disabled={loading}\n                                        className=\"mb-3\"\n                                    >\n                                        {loading ? (\n                                            <>\n                                                <LoadingSpinner size={20} variant=\"bootstrap\" />\n                                                <span className=\"ms-2\">Logging in...</span>\n                                            </>\n                                        ) : 'Login'}\n                                    </Button>\n                </div>\n                            </Form>\n\n                            <div className=\"text-center mb-3\">\n                                <p className=\"text-muted\">Or login with:</p>\n                                <div className=\"d-flex justify-content-center gap-2\">\n                                    <Button \n                                        variant=\"danger\"\n                                        onClick={() => window.location.href = `${process.env.REACT_APP_API_URL}/user/auth/google`}\n                                    >\n                                        <i className=\"bi bi-google me-2\"></i>\n                                        Google\n                                    </Button>\n                                    <Button \n                                        variant=\"primary\"\n                                        onClick={() => window.location.href = `${process.env.REACT_APP_API_URL}/user/auth/facebook`}\n                                    >\n                                        <i className=\"bi bi-facebook me-2\"></i>\n                                        Facebook\n                                    </Button>\n            </div>\n        </div>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default LoginPage;\n"],"names":["emailSchema","Yup","email","required","LoginPage","setEmail","useState","loading","setLoading","error","setError","navigate","useNavigate","user","authLoading","updateUser","useContext","UserContext","useEffect","authProvider","isProfileComplete","_jsx","Container","className","children","Row","_jsxs","Col","xs","LoadingSpinner","size","variant","md","lg","Card","Body","Title","as","Alert","Form","onSubmit","async","event","preventDefault","validate","response","post","token","localStorage","setItem","handleApiSuccess","message","handleApiError","Group","Label","Control","type","value","onChange","e","target","placeholder","isInvalid","Button","disabled","_Fragment","onClick","window","location","href"],"sourceRoot":""}